1. Find All Dependencies for the Table

This query provides all objects that depend on the table dbo.TableName:

SELECT OBJECT_NAME(referencing_id) AS DependentObjectName, 
       OBJECT_NAME(referenced_id) AS ReferencedObjectName,
       is_ambiguous
FROM sys.sql_expression_dependencies
WHERE referenced_id = OBJECT_ID('dbo.TableName');


--2. List Objects Where dbo.TableName Is Used
--This query checks all objects in the database for references to dbo.TableName:

SELECT o.name AS ObjectName, o.type_desc AS ObjectType
FROM sys.objects o
INNER JOIN sys.sql_modules m ON o.object_id = m.object_id
WHERE m.definition LIKE '%dbo.TableName%';


--3. Find Objects Referencing Specific Columns
--Use sys.sql_modules to search for references to the specific columns:

SELECT o.name AS ObjectName,
       o.type_desc AS ObjectType,
       m.definition
FROM sys.objects o
INNER JOIN sys.sql_modules m ON o.object_id = m.object_id
WHERE m.definition LIKE '%YourColumnName%' -- Replace with the column name
  AND o.type IN ('P', 'V', 'FN', 'TR');    -- P = Stored Procedure, V = View, FN = Function, TR = Trigger
  
  
--4. Check for INSERT or UPDATE Operations
--Filter objects to find where the column is being inserted into or updated in other tables:

SELECT o.name AS ObjectName,
       o.type_desc AS ObjectType,
       m.definition
FROM sys.objects o
INNER JOIN sys.sql_modules m ON o.object_id = m.object_id
WHERE m.definition LIKE '%INSERT%'
  AND m.definition LIKE '%YourColumnName%'
  AND o.type = 'P'; -- Focus on stored procedures

--Step 5. Identify Target Tables for Alteration
--If the column is inserted into other tables, identify those tables using the following query:
SELECT DISTINCT 
       t.name AS TargetTable,
       SCHEMA_NAME(t.schema_id) AS TargetSchema,
       o.name AS ObjectName,
       o.type_desc AS ObjectType,
       m.definition AS ObjectDefinition
FROM sys.sql_modules m
INNER JOIN sys.objects o ON m.object_id = o.object_id
INNER JOIN sys.columns c ON c.name = 'YourColumnName'
INNER JOIN sys.tables t ON t.object_id = c.object_id
WHERE m.definition LIKE '%INSERT%' 
  AND m.definition LIKE '%[' + t.name + ']%'
  AND m.definition LIKE '%YourColumnName%'
  AND o.type IN ('P', 'V', 'FN', 'TR'); -- Stored Procedures, Views, Functions, Triggers


--Filter by Columns:

--The sys.columns table is used to verify the column exists in the table. This eliminates false matches where the column does not exist.
--Restrict to Relevant Tables:

--The query only considers tables where the column is explicitly referenced in the SQL logic.
--Relevant SQL Objects:

--Filters to relevant object types (P, V, FN, TR) for stored procedures, views, functions, or triggers.

--Fallback: Manual Inspection
--If there are still issues (e.g., dynamic SQL), use this alternative to locate exact references:

SELECT o.name AS ObjectName,
       o.type_desc AS ObjectType,
       m.definition
FROM sys.objects o
INNER JOIN sys.sql_modules m ON o.object_id = m.object_id
WHERE m.definition LIKE '%YourColumnName%'
  AND m.definition LIKE '%YourTableName%';

--Common Issues and Solutions
--Dynamic SQL:

--If stored procedures use dynamic SQL to construct queries, manual review is necessary as sys.sql_modules cannot parse dynamic SQL content.
--Ambiguity:

--Ensure table and column names are unique or fully qualified (e.g., dbo.YourTableName).
--Case Sensitivity:

--Adjust the case of table/column names if the database is case-sensitive.

--Refresh the Views
--If the column alteration affects the schema (e.g., changes the data type or precision), you should refresh the view to ensure it uses the updated schema:
EXEC sp_refreshview 'ViewName';


--Automate View Refresh (Optional)
--If many views reference the table, you can automate the refresh process

DECLARE ViewCursor CURSOR FOR
SELECT OBJECT_NAME(object_id)
FROM sys.sql_expression_dependencies
WHERE referenced_id = OBJECT_ID('dbo.YourTableName')
      AND is_ambiguous = 0;

OPEN ViewCursor;

FETCH NEXT FROM ViewCursor INTO @ViewName;

WHILE @@FETCH_STATUS = 0
BEGIN
    EXEC sp_refreshview @ViewName;
    FETCH NEXT FROM ViewCursor INTO @ViewName;
END;

CLOSE ViewCursor;
DEALLOCATE ViewCursor;
