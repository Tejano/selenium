@Service
public class CommHistService {
    @Autowired
    private CommHistEntityRepository commHistRepository;

    public void executeStoredProcedure(String yearMonth) {
        // Call your stored procedure here
        // This could be a call to a stored procedure using Spring Data JPA
        // Example: commHistRepository.callStoredProc(yearMonth);
    }

    public void generateExcelWorkbook(String yearMonth, String outputPath) {
        // Generate Excel workbook here, e.g., using Apache POI or a library like Apache POI Excel

        try (Workbook workbook = new XSSFWorkbook()) {
            generateWorksheet(workbook, "AWP", AWPCommHistDTO.class, yearMonth);
            generateWorksheet(workbook, "MemEt", MemEtCommHistDTO.class, yearMonth);
            generateWorksheet(workbook, "FeeFlat", FeeFlatCommHistDTO.class, yearMonth);

            // Save the workbook to the specified file path
            try (FileOutputStream fileOutputStream = new FileOutputStream(outputPath)) {
                workbook.write(fileOutputStream);
            } catch (IOException e) {
                // Handle the exception if there's an issue with writing the workbook
                e.printStackTrace();
            }
        } catch (IOException e) {
            // Handle the exception if there's an issue with creating the workbook
            e.printStackTrace();
        }
    }

    private <T> void generateWorksheet(Workbook workbook, String sheetName, Class<T> dtoClass, String yearMonth) {
        // Replace this with your repository method to fetch data based on yearMonth and DTO class
        List<T> data = fetchDataByYearMonthAndCommType(yearMonth, dtoClass);

        Sheet sheet = workbook.createSheet(sheetName);

        // Create headers for columns based on DTO fields
        Row headerRow = sheet.createRow(0);
        Field[] fields = dtoClass.getDeclaredFields();

        int columnIdx = 0;
        for (Field field : fields) {
            field.setAccessible(true); // Allow access to private fields if necessary
            String fieldName = field.getName();
            headerRow.createCell(columnIdx++).setCellValue(fieldName);
        }

        // Populate data rows based on DTO fields
        int rowNum = 1;
        for (T dto : data) {
            Row dataRow = sheet.createRow(rowNum++);
            columnIdx = 0;
            for (Field field : fields) {
                field.setAccessible(true); // Allow access to private fields if necessary
                try {
                    Object value = field.get(dto);
                    // You may need to handle different data types and conversions here
                    dataRow.createCell(columnIdx++).setCellValue(value.toString());
                } catch (IllegalAccessException e) {
                    // Handle the exception as needed
                    e.printStackTrace();
                }
            }
        }
    }



private <T> List<T> fetchDataByYearMonthAndCommType(String yearMonth, Class<T> dtoClass) {
    List<T> result = new ArrayList<>();
    
    if (dtoClass == AWPCommHistDTO.class) {
        result.addAll(commHistRepository.getAWPCommHistByMonth(Integer.parseInt(yearMonth)));
    } else if (dtoClass == MemEtCommHistDTO.class) {
        // Use the appropriate repository method for MemEtCommHistDTO
        result.addAll(commHistRepository.getMemEtCommHistByMonth(Integer.parseInt(yearMonth)));
    } else if (dtoClass == FeeFlatCommHistDTO.class) {
        // Use the appropriate repository method for FeeFlatCommHistDTO
        result.addAll(commHistRepository.getFeeFlatCommHistByMonth(Integer.parseInt(yearMonth)));
    }
    
    return result;
}

}

private <T> List<T> fetchDataByYearMonthAndCommType(String yearMonth, Class<T> dtoClass) {
    List<T> result = new ArrayList<>();
    
    if (dtoClass == AWPCommHistDTO.class) {
        result.addAll((Collection<? extends T>)commHistRepository.getAWPCommHistByMonth(Integer.parseInt(yearMonth)));
    } else if (dtoClass == MemEtCommHistDTO.class) {
        // Use the appropriate repository method for MemEtCommHistDTO
        result.addAll((Collection<? extends T>)commHistRepository.getMemEtCommHistByMonth(Integer.parseInt(yearMonth)));
    } else if (dtoClass == FeeFlatCommHistDTO.class) {
        // Use the appropriate repository method for FeeFlatCommHistDTO
        result.addAll((Collection<? extends T>)commHistRepository.getFeeFlatCommHistByMonth(Integer.parseInt(yearMonth)));
    }
    
    return result;
}
String outputPath = "C:\\Users\\YourUsername\\Documents\\output.xlsx";
String outputPath = "C:/Users/YourUsername/Documents/output.xlsx";



