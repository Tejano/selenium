When you have multiple data sources configured in your Spring application and you use JdbcTemplate, it's important to specify which data source you want to use for a particular JdbcTemplate instance. If you don't explicitly specify a data source, Spring will use the default data source (if one is defined).

Here's how you can specify the data source for a JdbcTemplate:

Using Qualifier Annotation:
You can use the @Qualifier annotation to specify which data source to inject into the JdbcTemplate.

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.JdbcTemplate;
import javax.sql.DataSource;

@Configuration
public class JdbcTemplateConfig {

    @Bean
    public JdbcTemplate jdbcTemplate(@Qualifier("dataSource1") DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}
In this example, @Qualifier("dataSource1") specifies that the JdbcTemplate should use the data source named "dataSource1".

NamedDataSource:
If you have multiple data sources and they are named, you can directly reference the named data source when creating a JdbcTemplate.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup;

@Configuration
public class JdbcTemplateConfig {

    @Autowired
    private DataSource dataSource1;  // Assume you have a named data source named "dataSource1"

    @Autowired
    private DataSource dataSource2;  // Assume you have a named data source named "dataSource2"

    @Bean
    public JdbcTemplate jdbcTemplate1() {
        return new JdbcTemplate(dataSource1);
    }

    @Bean
    public JdbcTemplate jdbcTemplate2() {
        return new JdbcTemplate(dataSource2);
    }
}
In this example, we create multiple JdbcTemplate beans, each using a different data source.

Make sure to properly configure your data sources in your Spring configuration, and then inject the appropriate data source into the JdbcTemplate using one of the methods described above.

By explicitly specifying the data source, you ensure that the correct data source is used when interacting with the database using JdbcTemplate.


Using JdbcTemplate for Custom SQL Queries

Inject JdbcTemplate:
Inject the JdbcTemplate into your service.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

@Service
public class YourService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // Other methods...
}
Write a Method to Execute the Query and Map to DTO:

Write a method in the service that executes a custom SQL query and maps the result to DTOs.

import org.springframework.jdbc.core.BeanPropertyRowMapper;

public List<YourDTO> executeCustomQuery() {
    String sql = "SELECT field1, field2 FROM your_table WHERE some_condition";

    return jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(YourDTO.class));
}

Invoke the Service in Your Controller:
Inject the service into your controller and call the method to execute the custom query and get the result in DTOs.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class YourController {

    @Autowired
    private YourService yourService;

    @GetMapping("/your-data")
    public List<YourDTO> getYourData() {
        return yourService.executeCustomQuery();
    }
}

In both approaches, the key is to create a repository method or use JdbcTemplate to execute the desired query and then map the results to DTOs. Choose the approach that fits your requirements and existing project structure.


The JdbcTemplate in Spring provides a way to interact with a database using JDBC (Java Database Connectivity) without the need for boilerplate code for resource allocation, connection, and error handling. It acts as a simplified interface for database operations.

When you use jdbcTemplate.query(), the JdbcTemplate internally handles the database connection and the execution of the provided SQL query.

Here's what happens when you use jdbcTemplate.query():

Connection Management:
The JdbcTemplate internally manages the connection to the database. It uses a DataSource that is typically configured in your application context (e.g., via Spring configuration files or Java configuration) to obtain a connection.

Query Execution:
The jdbcTemplate.query() method takes the SQL query and a RowMapper (or ResultSetExtractor) as parameters. It executes the SQL query using the connection obtained from the DataSource.

Row Mapping:
The RowMapper is responsible for mapping each row of the result set to a Java object. In the provided example, we use BeanPropertyRowMapper which automatically maps columns to fields in a Java class based on their names.

Result Processing:
The method processes the result set row by row using the RowMapper. For each row, it maps the result to a Java object (e.g., a DTO) using the RowMapper.

Returning Results:
The results (mapped Java objects) are returned as a List of the specified type (in this case, a List<YourDTO>).

Resource Cleanup:
After processing the result set, the JdbcTemplate ensures that resources (such as the ResultSet and Statement) are properly closed, handling any exceptions that may occur during this process.

By using jdbcTemplate.query(), you are abstracted from the low-level details of managing database connections, executing queries, and handling exceptions. The JdbcTemplate simplifies these tasks and allows you to focus on your business logic and data processing.

In summary, jdbcTemplate.query() is a convenient and efficient way to execute a SQL query, map the results to Java objects, and handle resource cleanup, all in a streamlined manner.

