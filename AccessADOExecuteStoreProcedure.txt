
In Access 2016, the DoCmd.OpenStoredProcedure method is no longer supported as it was in Access ADP projects. 
To open and execute stored procedures, you need to switch to using a different approach, 
typically involving ADO (ActiveX Data Objects) or DAO (Data Access Objects) 
for executing stored procedures directly through VBA code.

Here's an example of how you can modify the code to execute a stored procedure using ADO:

Add a reference to the ADO library:

In the VBA editor, go to Tools -> References.
Check Microsoft ActiveX Data Objects 6.x Library (or the version available on your system).
Modify the code to use ADO to execute the stored procedure:


Sub ExecuteStoredProcedure(spName As String)
    Dim conn As Object
    Dim cmd As Object
    Dim rs As Object

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc

    ' Execute the stored procedure
    Set rs = cmd.Execute

    ' If the stored procedure returns a recordset, you can process it here
    ' For example:
    ' Do While Not rs.EOF
    '     Debug.Print rs.Fields(0).Value
    '     rs.MoveNext
    ' Loop

    ' Clean up
    rs.Close
    Set rs = Nothing
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing
End Sub

Call the ExecuteStoredProcedure subroutine with the name of the stored procedure:
Sub OpenMyStoredProcedure()
    ExecuteStoredProcedure "usp_YourStoredProcedureName"
End Sub

This approach uses ADO to connect to the SQL Server, set up a command object 
to execute the stored procedure, and then execute it. The ConnectionString should be updated to 
reflect your actual SQL Server connection details.

By using this method, you can replace the DoCmd.OpenStoredProcedure functionality with
 code that is compatible with Access 2016 and later versions.
 
 Function ExecuteStoredProcedureWithParams(spName As String, Optional params As Variant) As Object
    Dim conn As Object
    Dim cmd As Object
    Dim rsADO As Object
    Dim i As Integer

    On Error GoTo ErrorHandler

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc

    ' Check if parameters are provided
    If Not IsMissing(params) Then
        ' Add parameters to the command
        For i = LBound(params) To UBound(params) Step 3
            cmd.Parameters.Append cmd.CreateParameter(, params(i + 1), params(i + 2), , params(i))
        Next i
    End If

    ' Execute the stored procedure and get the ADO recordset
    Set rsADO = cmd.Execute

    ' Clean up ADO command and connection
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing

    ' Return the ADO recordset
    Set ExecuteStoredProcedureWithParams = rsADO

    Exit Function

ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description
    If Not conn Is Nothing Then
        If conn.State = 1 Then conn.Close
    End If
    Set cmd = Nothing
    Set conn = Nothing
    Set ExecuteStoredProcedureWithParams = Nothing
End Function

 Sub TestStoredProcedure()
    Dim rsADO As Object

    ' Call the stored procedure and get the recordset
    Set rsADO = ExecuteStoredProcedureWithParams("YourStoredProcedureName")

    ' Check if the recordset is valid
    If rsADO Is Nothing Then
        MsgBox "The recordset is nothing."
        Exit Sub
    End If

    ' Check if the recordset has data
    If rsADO.BOF And rsADO.EOF Then
        MsgBox "The recordset is empty. No data to display."
        rsADO.Close
        Set rsADO = Nothing
        Exit Sub
    End If

    ' Print the records to the Immediate Window
    Do While Not rsADO.EOF
        Debug.Print rsADO.Fields(0).Value & ":" & rsADO.Fields(0).Value
        rsADO.MoveNext
    Loop

    ' Clean up
    rsADO.Close
    Set rsADO = Nothing
End Sub

************************************************
Function ExecuteStoredProcedureWithParams(spName As String, Optional params As Variant) As Object
    Dim conn As Object
    Dim cmd As Object
    Dim rsADO As Object
    Dim i As Integer

    On Error GoTo ErrorHandler

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Set the cursor location to client-side to allow disconnection
    conn.CursorLocation = 3 ' adUseClient

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc

    ' Check if parameters are provided
    If Not IsMissing(params) Then
        ' Add parameters to the command
        For i = LBound(params) To UBound(params) Step 3
            cmd.Parameters.Append cmd.CreateParameter(, params(i + 1), params(i + 2), , params(i))
        Next i
    End If

    ' Execute the stored procedure and get the ADO recordset
    Set rsADO = CreateObject("ADODB.Recordset")
    rsADO.CursorLocation = 3 ' adUseClient
    rsADO.Open cmd, , 3, 1 ' adOpenStatic, adLockReadOnly

    ' Disconnect the recordset
    Set rsADO.ActiveConnection = Nothing

    ' Clean up ADO command and connection
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing

    ' Return the ADO recordset
    Set ExecuteStoredProcedureWithParams = rsADO

    Exit Function

ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description
    If Not conn Is Nothing Then
        If conn.State = 1 Then conn.Close
    End If
    Set cmd = Nothing
    Set conn = Nothing
    Set ExecuteStoredProcedureWithParams = Nothing
End Function
