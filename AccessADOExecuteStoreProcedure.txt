
In Access 2016, the DoCmd.OpenStoredProcedure method is no longer supported as it was in Access ADP projects. 
To open and execute stored procedures, you need to switch to using a different approach, 
typically involving ADO (ActiveX Data Objects) or DAO (Data Access Objects) 
for executing stored procedures directly through VBA code.

Here's an example of how you can modify the code to execute a stored procedure using ADO:

Add a reference to the ADO library:

In the VBA editor, go to Tools -> References.
Check Microsoft ActiveX Data Objects 6.x Library (or the version available on your system).
Modify the code to use ADO to execute the stored procedure:


Sub ExecuteStoredProcedure(spName As String)
    Dim conn As Object
    Dim cmd As Object
    Dim rs As Object

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc

    ' Execute the stored procedure
    Set rs = cmd.Execute

    ' If the stored procedure returns a recordset, you can process it here
    ' For example:
    ' Do While Not rs.EOF
    '     Debug.Print rs.Fields(0).Value
    '     rs.MoveNext
    ' Loop

    ' Clean up
    rs.Close
    Set rs = Nothing
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing
End Sub

Call the ExecuteStoredProcedure subroutine with the name of the stored procedure:
Sub OpenMyStoredProcedure()
    ExecuteStoredProcedure "usp_YourStoredProcedureName"
End Sub

This approach uses ADO to connect to the SQL Server, set up a command object 
to execute the stored procedure, and then execute it. The ConnectionString should be updated to 
reflect your actual SQL Server connection details.

By using this method, you can replace the DoCmd.OpenStoredProcedure functionality with
 code that is compatible with Access 2016 and later versions.
 
 Function ExecuteStoredProcedureWithParams(spName As String, Optional params As Variant) As Object
    Dim conn As Object
    Dim cmd As Object
    Dim rsADO As Object
    Dim i As Integer

    On Error GoTo ErrorHandler

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc

    ' Check if parameters are provided
    If Not IsMissing(params) Then
        ' Add parameters to the command
        For i = LBound(params) To UBound(params) Step 3
            cmd.Parameters.Append cmd.CreateParameter(, params(i + 1), params(i + 2), , params(i))
        Next i
    End If

    ' Execute the stored procedure and get the ADO recordset
    Set rsADO = cmd.Execute

    ' Clean up ADO command and connection
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing

    ' Return the ADO recordset
    Set ExecuteStoredProcedureWithParams = rsADO

    Exit Function

ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description
    If Not conn Is Nothing Then
        If conn.State = 1 Then conn.Close
    End If
    Set cmd = Nothing
    Set conn = Nothing
    Set ExecuteStoredProcedureWithParams = Nothing
End Function

 Sub TestStoredProcedure()
    Dim rsADO As Object

    ' Call the stored procedure and get the recordset
    Set rsADO = ExecuteStoredProcedureWithParams("YourStoredProcedureName")

    ' Check if the recordset is valid
    If rsADO Is Nothing Then
        MsgBox "The recordset is nothing."
        Exit Sub
    End If

    ' Check if the recordset has data
    If rsADO.BOF And rsADO.EOF Then
        MsgBox "The recordset is empty. No data to display."
        rsADO.Close
        Set rsADO = Nothing
        Exit Sub
    End If

    ' Print the records to the Immediate Window
    Do While Not rsADO.EOF
        Debug.Print rsADO.Fields(0).Value & ":" & rsADO.Fields(0).Value
        rsADO.MoveNext
    Loop

    ' Clean up
    rsADO.Close
    Set rsADO = Nothing
End Sub

*************************************************************************************************
*************************************************************************************************

Function ExecuteStoredProcedureWithParams(spName As String, Optional params As Variant) As Object
    Dim conn As Object
    Dim cmd As Object
    Dim rsADO As Object
    Dim i As Integer

    On Error GoTo ErrorHandler

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Set the cursor location to client-side to allow disconnection
    conn.CursorLocation = 3 ' adUseClient

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc

    ' Check if parameters are provided
    If Not IsMissing(params) Then
        ' Add parameters to the command
        For i = LBound(params) To UBound(params) Step 3
            cmd.Parameters.Append cmd.CreateParameter(, params(i + 1), params(i + 2), , params(i))
        Next i
    End If

    ' Execute the stored procedure and get the ADO recordset
    Set rsADO = CreateObject("ADODB.Recordset")
    rsADO.CursorLocation = 3 ' adUseClient
    rsADO.Open cmd, , 3, 1 ' adOpenStatic, adLockReadOnly

    ' Disconnect the recordset
    Set rsADO.ActiveConnection = Nothing

    ' Clean up ADO command and connection
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing

    ' Return the ADO recordset
    Set ExecuteStoredProcedureWithParams = rsADO

    Exit Function

ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description
    If Not conn Is Nothing Then
        If conn.State = 1 Then conn.Close
    End If
    Set cmd = Nothing
    Set conn = Nothing
    Set ExecuteStoredProcedureWithParams = Nothing
End Function

***********************************************************************************************
***********************************************************************************************

Sub OpenReadOnlyForm(spName As String, Optional params As Variant, Optional formName As String)
    Dim rsADO As Object
    Dim rsDAO As DAO.Recordset
    Dim frm As Access.Form
    Dim tempFormName As String
    Dim frmName As String
    Dim fld As DAO.Field
    Dim ctl As Access.Control
    Dim intDataX As Integer
    Dim intDataY As Integer

    ' Execute the stored procedure and get the ADO recordset
    Set rsADO = ExecuteStoredProcedureWithParams(spName, params)

    ' Check if the recordset is valid
    If rsADO Is Nothing Then
        MsgBox "Failed to execute stored procedure. No recordset returned."
        Exit Sub
    End If

    ' Check if the recordset has data
    If rsADO.BOF And rsADO.EOF Then
        MsgBox "The recordset is empty. No data to display."
        rsADO.Close
        Set rsADO = Nothing
        Exit Sub
    End If

    ' Convert the ADO recordset to DAO recordset
    Set rsDAO = ConvertToDAORecordset(rsADO)

    ' Use provided form name or generate a user-friendly form name
    If Len(formName) > 0 Then
        frmName = formName
    Else
        frmName = "frm_" & spName & "_" & Format(Now(), "yyyymmdd_hhnnss")
    End If

    ' Create a new form in Design View
    Set frm = CreateForm
    tempFormName = frm.Name

    ' Set the form's RecordSource to TempTable
    frm.RecordSource = "TempTable"

    ' Add fields to the form
    intDataX = 100
    intDataY = 100
    For Each fld In rsDAO.Fields
        Set ctl = CreateControl(frm.Name, acTextBox, , , fld.Name, intDataX, intDataY)
        ctl.Name = fld.Name
        ctl.ControlSource = fld.Name
        intDataY = intDataY + 350
    Next fld

    ' Set the form properties to make it read-only
    frm.AllowAdditions = False
    frm.AllowDeletions = False
    frm.AllowEdits = False

    ' Save and close the form with the temporary name
    DoCmd.Save acForm, tempFormName
    DoCmd.Close acForm, tempFormName

    ' Rename the form
    DoCmd.Rename frmName, acForm, tempFormName

    ' Reopen the form and set its Recordset
    DoCmd.OpenForm frmName, acFormDS
    Set Forms(frmName).Recordset = rsDAO

    ' Clean up
    rsADO.Close
    Set rsADO = Nothing
    Set rsDAO = Nothing
End Sub



**********************************************************************
**********************************************************************

Function ConvertToDAORecordset(adoRS As Object) As DAO.Recordset
    Dim db As DAO.Database
    Dim tempRS As DAO.Recordset
    Dim fld As Object

    ' Create a temporary table
    Set db = CurrentDb()
	
    On Error Resume Next
    db.Execute "DROP TABLE TempTable"
    On Error GoTo 0
    db.Execute "CREATE TABLE TempTable (TempID COUNTER PRIMARY KEY)"
	
    ' Append fields to the temporary table
	For Each fld In adoRS.Fields
        db.Execute "ALTER TABLE TempTable ADD COLUMN [" & fld.Name & "] " & GetDAOType(fld.Type, fld.DefinedSize)
    Next fld

    ' Open a recordset on the temporary table
    Set tempRS = db.OpenRecordset("TempTable", dbOpenDynaset)

    ' Copy ADO records to DAO recordset
    adoRS.MoveFirst
    Do While Not adoRS.EOF
        tempRS.AddNew
        For Each fld In adoRS.Fields
            tempRS.Fields(fld.Name).Value = fld.Value
        Next fld
        tempRS.Update
        adoRS.MoveNext
    Loop

    ' Return the DAO recordset
    Set ConvertToDAORecordset = tempRS

    ' Clean up
    Set tempRS = Nothing
    Set db = Nothing
End Function

Function GetDAOType(adoType As Long, size As Long) As String
    Select Case adoType
        Case adVarWChar, adWChar
            GetDAOType = "TEXT(" & size & ")"
        Case adInteger
            GetDAOType = "LONG"
        Case adBoolean
            GetDAOType = "YESNO"
        Case adDate
            GetDAOType = "DATETIME"
        Case adDouble
            GetDAOType = "DOUBLE"
        Case Else
            GetDAOType = "TEXT(255)" ' Default to TEXT
    End Select
End Function

*********************************************************************
*********************************************************************

Private Sub btnRunStoredProcedure_Click()
    Dim spName As String
    Dim params As Variant
    Dim paramCount As Integer
    Dim paramValue As Variant
    Dim paramType As Integer
    Dim paramDirection As Integer
    Dim i As Integer
    Dim args() As Variant

    spName = "usp_YourStoredProcedureName" ' Your stored procedure name

    ' Prompt the user to enter the number of parameters
    paramCount = InputBox("Enter the number of parameters:", "Parameter Count")

    ' Initialize the params array
    ReDim params(1 To paramCount * 3)

    ' Loop through and collect each parameter
    For i = 1 To paramCount
        ' Prompt the user for each parameter value
        paramValue = InputBox("Enter the value for parameter " & i & ":", "Parameter Value")
        ' Prompt the user for the parameter type
        paramType = InputBox("Enter the type for parameter " & i & " (e.g., 200 for adVarChar, 3 for adInteger):", "Parameter Type")
        ' Prompt the user for the parameter direction (1 = Input, 2 = Output, 3 = Input/Output, 4 = Return Value)
        paramDirection = InputBox("Enter the direction for parameter " & i & " (1 = Input, 2 = Output, 3 = Input/Output, 4 = Return Value):", "Parameter Direction")

        ' Store the parameter details in the params array
        params((i - 1) * 3 + 1) = paramValue
        params((i - 1) * 3 + 2) = paramType
        params((i - 1) * 3 + 3) = paramDirection
    Next i

    ' Pass the parameters to OpenReadOnlyForm
    OpenReadOnlyForm spName, params, "MyCustomFormName"
End Sub
***************************************************************************************
***************************************************************************************
Private Sub btnRunStoredProcedure_Click()
    Dim spName As String
    Dim params As Variant
    Dim paramValue1 As String
    Dim paramValue2 As String
    Dim paramType1 As Integer
    Dim paramType2 As Integer
    Dim paramDirection1 As Integer
    Dim paramDirection2 As Integer

    spName = "usp_YourStoredProcedureName" ' Your stored procedure name

    ' Prompt the user for the YearMonth parameter
    Do
        paramValue1 = InputBox("Enter the YearMonth (e.g., 202301):", "YearMonth")
        ' Validate that the input is a six-character numeric string
        If Len(paramValue1) = 6 And IsNumeric(paramValue1) Then
            Exit Do
        Else
            MsgBox "Invalid input. Please enter a six-character numeric string representing YearMonth (e.g., 202301).", vbExclamation
        End If
    Loop

    ' Define the type and direction for YearMonth parameter
    paramType1 = 200 ' adVarChar
    paramDirection1 = 1 ' Input

    ' Prompt the user for the second parameter, e.g., CustomerID
    paramValue2 = InputBox("Enter the CustomerID:", "CustomerID")
    
    ' Define the type and direction for CustomerID parameter
    paramType2 = 3 ' adInteger
    paramDirection2 = 1 ' Input

    ' Initialize the params array
    ReDim params(1 To 6)
    params(1) = paramValue1
    params(2) = paramType1
    params(3) = paramDirection1
    params(4) = paramValue2
    params(5) = paramType2
    params(6) = paramDirection2

    ' Pass the parameters to OpenReadOnlyForm
    OpenReadOnlyForm spName, params, "MyCustomFormName"
End Sub
/*************************************************
/*** Same as above with addition validation code
/*************************************************
Private Sub btnRunStoredProcedure_Click()
    Dim spName As String
    Dim params As Variant
    Dim paramValue1 As String
    Dim paramValue2 As String
    Dim paramType1 As Integer
    Dim paramType2 As Integer
    Dim paramDirection1 As Integer
    Dim paramDirection2 As Integer
    Dim isValid As Boolean

    spName = "usp_YourStoredProcedureName" ' Your stored procedure name

    ' Prompt the user for the YearMonth parameter
    Do
        paramValue1 = InputBox("Enter the YearMonth (e.g., 202301):", "YearMonth")
        ' Check if the user clicked Cancel or OK without entering a value
        If paramValue1 = "" Then
            MsgBox "Operation canceled.", vbExclamation
            Exit Sub
        End If
        ' Validate that the input is a six-character numeric string
        If Len(paramValue1) = 6 And IsNumeric(paramValue1) Then
            isValid = True
        Else
            MsgBox "Invalid input. Please enter a six-character numeric string representing YearMonth (e.g., 202301).", vbExclamation
            isValid = False
        End If
    Loop Until isValid

    ' Define the type and direction for YearMonth parameter
    paramType1 = 200 ' adVarChar
    paramDirection1 = 1 ' Input

    ' Prompt the user for the second parameter, e.g., CustomerID
    paramValue2 = InputBox("Enter the CustomerID:", "CustomerID")
    ' Check if the user clicked Cancel or OK without entering a value
    If paramValue2 = "" Then
        MsgBox "Operation canceled.", vbExclamation
        Exit Sub
    End If

    ' Define the type and direction for CustomerID parameter
    paramType2 = 3 ' adInteger
    paramDirection2 = 1 ' Input

    ' Initialize the params array
    ReDim params(1 To 6)
    params(1) = paramValue1
    params(2) = paramType1
    params(3) = paramDirection1
    params(4) = paramValue2
    params(5) = paramType2
    params(6) = paramDirection2

    ' Pass the parameters to OpenReadOnlyForm
    OpenReadOnlyForm spName, params, "MyCustomFormName"
End Sub
-----------------------------------------------------------------------
Function that handles sps that return and don't return values. 
-----------------------------------------------------------------------
Function ExecuteStoredProcedureWithParams(spName As String, Optional params As Variant, Optional ByRef returnCode As Long) As Object
    Dim conn As Object
    Dim cmd As Object
    Dim rsADO As Object
    Dim i As Integer

    On Error GoTo ErrorHandler

    ' Create a new ADO connection object
    Set conn = CreateObject("ADODB.Connection")
    Set cmd = CreateObject("ADODB.Command")

    ' Set the cursor location to client-side to allow disconnection
    conn.CursorLocation = 3 ' adUseClient

    ' Open the connection to the SQL Server
    conn.ConnectionString = "Provider=SQLOLEDB;Data Source=YourServerName;Initial Catalog=YourDatabaseName;Integrated Security=SSPI;"
    conn.Open

    ' Set up the command object
    Set cmd.ActiveConnection = conn
    cmd.CommandText = spName
    cmd.CommandType = 4 ' adCmdStoredProc
    cmd.CommandTimeout = 600 ' Set the command timeout to 10 minutes (600 seconds)

    ' Check if parameters are provided
    If Not IsMissing(params) Then
        ' Add parameters to the command
        For i = LBound(params) To UBound(params) Step 3
            cmd.Parameters.Append cmd.CreateParameter(, params(i + 1), params(i + 2), , params(i))
        Next i
    End If

    ' Add a return code parameter
    cmd.Parameters.Append cmd.CreateParameter("ReturnCode", 3, 4) ' adInteger, adParamReturnValue

    ' Execute the stored procedure and get the ADO recordset
    Set rsADO = CreateObject("ADODB.Recordset")
    rsADO.CursorLocation = 3 ' adUseClient
    rsADO.Open cmd, , 3, 1 ' adOpenStatic, adLockReadOnly

    ' Get the return code
    returnCode = cmd.Parameters("ReturnCode").Value

    ' Clean up ADO command and connection
    Set cmd = Nothing
    conn.Close
    Set conn = Nothing

    ' Return the ADO recordset, even if it is empty
    Set ExecuteStoredProcedureWithParams = rsADO

    Exit Function

ErrorHandler:
    MsgBox "Error " & Err.Number & ": " & Err.Description
    If Not conn Is Nothing Then
        If conn.State = 1 Then conn.Close
    End If
    Set cmd = Nothing
    Set conn = Nothing
    Set ExecuteStoredProcedureWithParams = Nothing
    returnCode = -1 ' Indicate an error occurred
End Function

Private Sub btnRunStoredProcedure_Click()
    Dim spName As String
    Dim params As Variant
    Dim returnCode As Long
    Dim rsADO As Object

    spName = "usp_YourStoredProcedureName" ' Your stored procedure name

    ' Initialize the params array if there are any parameters
    ' For this example, let's assume there are no parameters
    ReDim params(0)

    ' Execute the stored procedure and get the return code
    Set rsADO = ExecuteStoredProcedureWithParams(spName, params, returnCode)

    ' Check the return code
    If returnCode = 0 Then
        MsgBox "Stored procedure executed successfully.", vbInformation
    Else
        MsgBox "Stored procedure execution failed. Return code: " & returnCode, vbExclamation
    End If

    ' If the stored procedure returned a recordset, process it
    If Not rsADO Is Nothing Then
        If Not (rsADO.BOF And rsADO.EOF) Then
            ' Process the recordset (if necessary)
            ' Example: Display the data in a message box
            rsADO.MoveFirst
            Do While Not rsADO.EOF
                MsgBox "Data: " & rsADO.Fields(0).Value
                rsADO.MoveNext
            Loop
        End If
        rsADO.Close
        Set rsADO = Nothing
    End If
End Sub

