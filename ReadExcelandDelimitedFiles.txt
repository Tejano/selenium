
To read an Excel file containing a list of job names and their corresponding file locations in a Spring Boot application using Apache POI (a popular Java library for reading and writing Excel files), you can follow these steps:

Add Apache POI Dependency:

Add the Apache POI dependency to your pom.xml file:
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>4.1.2</version> <!-- Or the latest version available -->
</dependency>
Create a Service to Read Excel File:

Create a service class that will handle reading the Excel file and extracting the job names and file locations. This example assumes you have a simple Excel file with two columns: "Job Name" and "File Location".
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class ExcelService {

    public List<JobInfo> readExcelFile(MultipartFile file) throws IOException {
        List<JobInfo> jobInfoList = new ArrayList<>();

        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            Iterator<Row> rowIterator = sheet.iterator();

            // Skip the header row
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                // Assuming column 0 contains job names and column 1 contains file locations
                String jobName = row.getCell(0).getStringCellValue();
                String fileLocation = row.getCell(1).getStringCellValue();

                JobInfo jobInfo = new JobInfo(jobName, fileLocation);
                jobInfoList.add(jobInfo);
            }
        }

        return jobInfoList;
    }
}
Model for Job Information:

Create a model class to represent the job information.
public class JobInfo {
    private String jobName;
    private String fileLocation;

    public JobInfo(String jobName, String fileLocation) {
        this.jobName = jobName;
        this.fileLocation = fileLocation;
    }

    // Getters and setters
}
Controller to Handle File Upload and Reading:

Create a controller that handles the file upload and uses the ExcelService to read the Excel file.
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/api/excel")
public class ExcelController {

    @Autowired
    private ExcelService excelService;

    @PostMapping("/upload")
    public ResponseEntity<List<JobInfo>> uploadExcel(@RequestParam("file") MultipartFile file) {
        try {
            List<JobInfo> jobInfoList = excelService.readExcelFile(file);
            return ResponseEntity.ok(jobInfoList);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }
}
In this example, the ExcelService reads the Excel file and returns a list of JobInfo objects containing the job names and file locations. The controller receives a MultipartFile (the uploaded Excel file), calls the ExcelService to read the file, and returns the job information to the client. Adjust the column numbers and data extraction logic according to your specific Excel file structure.

To read an Excel file from a given file path and pass the file to a method for processing in a Spring Boot application, you can modify the ExcelService to handle file path as input. Here's an example of how to do this:

Update ExcelService:

Modify the readExcelFile method to accept a file path as a parameter and load the file from that path.
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class ExcelService {

    public List<JobInfo> readExcelFile(String filePath) throws IOException {
        List<JobInfo> jobInfoList = new ArrayList<>();

        try (Workbook workbook = new XSSFWorkbook(new FileInputStream(filePath))) {
            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            Iterator<Row> rowIterator = sheet.iterator();

            // Skip the header row
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                // Assuming column 0 contains job names and column 1 contains file locations
                String jobName = row.getCell(0).getStringCellValue();
                String fileLocation = row.getCell(1).getStringCellValue();

                JobInfo jobInfo = new JobInfo(jobName, fileLocation);
                jobInfoList.add(jobInfo);
            }
        }

        return jobInfoList;
    }
}
Update Controller to Accept File Path:

Modify the controller to accept a file path and pass it to the ExcelService for processing.
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/api/excel")
public class ExcelController {

    @Autowired
    private ExcelService excelService;

    @PostMapping("/process")
    public ResponseEntity<List<JobInfo>> processExcel(@RequestParam("filePath") String filePath) {
        try {
            List<JobInfo> jobInfoList = excelService.readExcelFile(filePath);
            // Call a method for further processing
            processJobInfoList(jobInfoList);
            return ResponseEntity.ok(jobInfoList);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    private void processJobInfoList(List<JobInfo> jobInfoList) {
        // TODO: Implement your processing logic for the job information list
        // This method should contain the logic to process the job information obtained from the Excel file
        // For this example, we'll simply print the job information to the console
        jobInfoList.forEach(jobInfo -> System.out.println(jobInfo.getJobName() + ": " + jobInfo.getFileLocation()));
    }
}
In this updated example, the processExcel method in the controller accepts a file path and passes it to the readExcelFile method in the ExcelService. It then calls a method (processJobInfoList) for further processing. Adjust the processJobInfoList method according to your specific processing requirements.

Create a Service to Read and Write Excel File:

Create a service class that will handle reading the delimited file and writing the data to an Excel worksheet.
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

@Service
public class ExcelService {

    public Workbook createExcelFromDelimitedFile(String filePath, String delimiter) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Data");

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            int rowNum = 0;

            while ((line = reader.readLine()) != null) {
                Row row = sheet.createRow(rowNum++);
                String[] columns = line.split(delimiter);

                for (int i = 0; i < columns.length; i++) {
                    Cell cell = row.createCell(i);
                    cell.setCellValue(columns[i]);
                }
            }
        }

        return workbook;
    }
}
Controller to Handle File Processing:

Create a controller that handles the file processing and returns the Excel workbook.
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api/excel")
public class ExcelController {

    @Autowired
    private ExcelService excelService;

    @GetMapping("/generate/{delimiter}")
    public ResponseEntity<byte[]> generateExcelFromDelimitedFile(
            @PathVariable String delimiter) {

        String filePath = "path/to/your/delimited/file.txt"; // Specify the path to your delimited file

        try {
            Workbook workbook = excelService.createExcelFromDelimitedFile(filePath, delimiter);

            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=data.xlsx");

            return new ResponseEntity<>(workbook.getBytes(), headers, HttpStatus.OK);
        } catch (IOException e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
Replace "path/to/your/delimited/file.txt" with the actual file path containing the delimited data.

Endpoint to Generate Excel:

Create an endpoint to trigger the Excel generation from the delimited file.

For example, if you want to generate an Excel file using a colon as the delimiter, you would call this endpoint:
GET /api/excel/generate/: 
Adjust the endpoint and request according to the desired delimiter.

This example demonstrates how to read a delimited file, split the lines based on the specified delimiter, and create an Excel workbook with the data. You can further customize this to suit your specific requirements and file handling needs.

You are correct; my apologies for the oversight. The getBytes() method is not available directly on the Workbook interface in Apache POI. To send the workbook as bytes in the ResponseEntity, we need to write the workbook to an output stream and then convert the output stream to a byte array.

Here's how you can do this:

import org.apache.poi.ss.usermodel.Workbook;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class ExcelUtil {

    public static byte[] workbookToBytes(Workbook workbook) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        workbook.write(bos);
        bos.close();
        return bos.toByteArray();
    }
}
Now, you can use this utility method to convert the workbook to bytes and return it in the ResponseEntity:
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.apache.poi.ss.usermodel.Workbook;

public class YourController {

    public ResponseEntity<byte[]> generateExcel() throws IOException {
        // Create your workbook
        Workbook workbook = createWorkbook();

        // Convert workbook to bytes
        byte[] workbookBytes = ExcelUtil.workbookToBytes(workbook);

        // Set the headers
        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=data.xlsx");

        // Return the byte array as ResponseEntity
        return new ResponseEntity<>(workbookBytes, headers, HttpStatus.OK);
    }

    // Method to create the workbook - implement as needed
    private Workbook createWorkbook() {
        // Implement as needed based on your requirements
        // This is a placeholder and should be replaced with actual workbook creation logic
        return null;
    }
}
Replace createWorkbook() with your actual workbook creation logic. This code will convert the workbook to bytes and send it in the ResponseEntity.

