
public class SSISJobDTO {
    private boolean runFlag;
    private String jobName;
    private String source;
    private boolean runStatus;
    private String packageName;
    private String jobStatus;

    // getters and setters
}



In this example, we assume the Excel file has columns in the order: RunFlag, JobName, Source, RunStatus, PackageName, 
and JobStatus. Adjust the column indices accordingly based on your actual Excel structure. 
The method reads the Excel file and populates the SSISJobDTO objects, filtering only the rows with RunFlag set to "Yes".


Implement Excel Reading and DTO Population:

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class ExcelService {
    public List<SSISJobDTO> readExcel(String filePath) {
        List<SSISJobDTO> dtoList = new ArrayList<>();

        try (FileInputStream excelFile = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(excelFile)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = sheet.iterator();

            // Skip header row
            if (iterator.hasNext()) {
                iterator.next();
            }

            while (iterator.hasNext()) {
                Row currentRow = iterator.next();

                // Assuming column indices for respective fields
                boolean runFlag = currentRow.getCell(0).getStringCellValue().equalsIgnoreCase("Yes");
                String jobName = currentRow.getCell(1).getStringCellValue();
                String source = currentRow.getCell(2).getStringCellValue();
                boolean runStatus = currentRow.getCell(3).getBooleanCellValue();
                String packageName = currentRow.getCell(4).getStringCellValue();
                String jobStatus = currentRow.getCell(5).getStringCellValue();

                // Only process rows with RunFlag set to "Yes"
                if (runFlag) {
                    SSISJobDTO jobDTO = new SSISJobDTO();
                    jobDTO.setRunFlag(runFlag);
                    jobDTO.setJobName(jobName);
                    jobDTO.setSource(source);
                    jobDTO.setRunStatus(runStatus);
                    jobDTO.setPackageName(packageName);
                    jobDTO.setJobStatus(jobStatus);

                    dtoList.add(jobDTO);
                }
            }
        } catch (IOException e) {
            // Handle IOException
            e.printStackTrace();
        }

        return dtoList;
    }
}




Yes, you can change the cell or row color in Excel using Apache POI. However, please note that the actual color appearance will depend on the viewer (like Microsoft Excel) and may vary.

To change the cell or row color, you'll need to use the CellStyle class in Apache POI. Here's how you can modify the updateExcel method to change the row color based on whether the update was successful or failed:




import org.apache.poi.ss.usermodel.*;

public void updateExcel(String filePath, List<SSISJobDTO> dtoList) {
    try (FileInputStream excelFile = new FileInputStream(new File(filePath));
         Workbook workbook = new XSSFWorkbook(excelFile)) {

        Sheet sheet = workbook.getSheetAt(0);
        CreationHelper creationHelper = workbook.getCreationHelper();

        for (SSISJobDTO jobDTO : dtoList) {
            for (int rowIndex = 1; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
                Row row = sheet.getRow(rowIndex);

                // Assuming jobName is in column 2 (0-based index)
                String jobNameInExcel = row.getCell(1).getStringCellValue();

                if (jobDTO.getJobName().equals(jobNameInExcel)) {
                    Cell jobStatusCell = row.createCell(5); // Assuming jobStatus is in column 6 (0-based index)
                    jobStatusCell.setCellValue(jobDTO.getJobStatus());

                    Cell runFlagCell = row.createCell(0); // Assuming runFlag is in column 1 (0-based index)
                    runFlagCell.setCellValue(jobDTO.isRunFlag() ? "Yes" : "No");

                    // Create a CellStyle with the desired fill color
                    CellStyle style = workbook.createCellStyle();
                    style.setFillForegroundColor(getCellColor(jobDTO));
                    style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

                    // Apply the style to the row
                    row.setRowStyle(style);

                    break;  // Break after updating the corresponding row
                }
            }
        }

        // Save the updated Excel file
        try (FileOutputStream outFile = new FileOutputStream(new File(filePath))) {
            workbook.write(outFile);
        }
    } catch (IOException e) {
        // Handle IOException
        e.printStackTrace();
    }
}

// Helper method to determine the cell color based on success or failure
private short getCellColor(SSISJobDTO jobDTO) {
    if (jobDTO.getRunStatus()) {
        // Light green for success
        return IndexedColors.LIGHT_GREEN.getIndex();
    } else {
        // Light red for failure
        return IndexedColors.LIGHT_CORAL.getIndex();
    }
}

CellStyle Creation:
Instead of creating a new CellStyle for each row, create a CellStyle for each cell 
and set the style for each cell individually. This way, the style will be applied to cells irrespective of whether they are null or have values.

Modify your updateExcel method as follows:
for (SSISJobDTO jobDTO : dtoList) {
    for (int rowIndex = 1; rowIndex <= sheet.getLastRowNum(); rowIndex++) {
        Row row = sheet.getRow(rowIndex);

        // Assuming jobName is in column 2 (0-based index)
        String jobNameInExcel = row.getCell(1).getStringCellValue();

        if (jobDTO.getJobName().equals(jobNameInExcel)) {
            Cell jobStatusCell = row.createCell(5); // Assuming jobStatus is in column 6 (0-based index)
            jobStatusCell.setCellValue(jobDTO.getJobStatus());

            Cell runFlagCell = row.createCell(0); // Assuming runFlag is in column 1 (0-based index)
            runFlagCell.setCellValue(jobDTO.isRunFlag() ? "Yes" : "No");

            // Create a CellStyle with the desired fill color
            CellStyle style = workbook.createCellStyle();
            style.setFillForegroundColor(getCellColor(jobDTO));
            style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            // Apply the style to the cells
            jobStatusCell.setCellStyle(style);
            runFlagCell.setCellStyle(style);

            break;  // Break after updating the corresponding row
        }
    }
}
In this modified version, we create a CellStyle once and set it for each cell (jobStatusCell and runFlagCell) individually.

Verify Data:
Double-check that the cells with values indeed have the expected values. If they have values, they should be highlighted with the desired colors.

By applying the CellStyle to each cell individually, you should be able to ensure that cells with values are also highlighted correctly.


In this modified version of the updateExcel method:

We create a CellStyle with the desired fill color (light green for success, light red for failure).
We apply this style to the row after updating the cell values.
The getCellColor method determines the color based on the runStatus in the SSISJobDTO. We use the IndexedColors enum from Apache POI to get the color index.
Note that IndexedColors.LIGHT_GREEN.getIndex() and IndexedColors.LIGHT_CORAL.getIndex() return the color index for light green and light red, respectively. 
The actual appearance of colors may vary depending on the viewer used to open the Excel file.


In Apache POI, to access a specific worksheet in a workbook with multiple worksheets, you use the getSheetAt(int index) method of the Workbook class. 
The index parameter is a zero-based index representing the position of the worksheet within the workbook. Here's how you can access a specific worksheet:

import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

// Load the workbook (assuming it's an XLSX workbook)
Workbook workbook = new XSSFWorkbook("path/to/your/file.xlsx");

// Get the first worksheet (index 0)
Sheet firstWorksheet = workbook.getSheetAt(0);

// Get the second worksheet (index 1)
Sheet secondWorksheet = workbook.getSheetAt(1);

// Do something with the worksheets...



In this example, we load an XLSX workbook and then use getSheetAt to access the first and second worksheets. 
Adjust the index according to the specific worksheet you want to access within the workbook.

If you want to access a worksheet by its name (rather than by index), you can use the getSheet(String name) method:

// Get a worksheet by its name
Sheet sheetByName = workbook.getSheet("Sheet1");

// Do something with the worksheet...


Now, let's modify the loop to update a JobStatusDTO for each job:

import java.util.ArrayList;
import java.util.List;

// Assuming SSISRunJob is your class with boolean runFlag, String jobname, String filePath
// Assuming JobStatusDTO is your class to capture job status

List<SSISRunJob> jobs = service.getJobs();
List<JobStatusDTO> jobStatusList = new ArrayList<>();

for (SSISRunJob job : jobs) {
    // Process each job and update its status
    boolean isJobSuccessful = processJob(job);

    // Create a JobStatusDTO for the current job and update its status
    JobStatusDTO jobStatus = new JobStatusDTO();
    jobStatus.setJobName(job.getJobname());
    jobStatus.setJobSuccessful(isJobSuccessful);

    // Add the JobStatusDTO to the list
    jobStatusList.add(jobStatus);
}

// Function to process a job (you'll implement this according to your requirements)
private boolean processJob(SSISRunJob job) {
    // Implement your logic to process the job and determine its success/failure
    // For demonstration, let's assume the job is always successful
    return true;
}




Update the Loop to Set JobStatus and Message:

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

// Inside your loop where you process each job and update its status
for (SSISRunJob job : jobs) {
    boolean isJobSuccessful = processJob(job);
    String jobStatus = isJobSuccessful ? "Completed" : "Failed";
    String message = isJobSuccessful ? "Job was successful." : "Job failed.";

    JobStatusDTO jobStatusDTO = new JobStatusDTO();
    jobStatusDTO.setJobName(job.getJobname());
    jobStatusDTO.setJobSuccessful(isJobSuccessful);
    jobStatusDTO.setJobStatus(jobStatus);
    jobStatusDTO.setMessage(message);

    jobStatusList.add(jobStatusDTO);
}


Update Excel Spreadsheet Based on JobStatusDTO:


try {
    // Load your existing Excel file
    FileInputStream excelFile = new FileInputStream(new File("path/to/your/excel/file.xlsx"));
    Workbook workbook = new XSSFWorkbook(excelFile);
    Sheet sheet = workbook.getSheetAt(0); // Assuming your sheet is at index 0

    for (JobStatusDTO jobStatusDTO : jobStatusList) {
        String jobName = jobStatusDTO.getJobName();
        String status = jobStatusDTO.getJobStatus();
        String message = jobStatusDTO.getMessage();

        // Iterate through the rows and find the row with the matching jobName
        for (Row row : sheet) {
            Cell cell = row.getCell(0); // Assuming jobName is in the first column

            if (cell != null && cell.getStringCellValue().equals(jobName)) {
                // Update job status and message in the respective columns
                row.createCell(1).setCellValue(status);   // Assuming status is in the second column
                row.createCell(2).setCellValue(message);  // Assuming message is in the third column
                break; // Stop searching once job is found
            }
        }
    }

    // Write the updated data to the Excel file
    FileOutputStream outputStream = new FileOutputStream("path/to/your/excel/file.xlsx");
    workbook.write(outputStream);
    workbook.close();
    outputStream.close();

} catch (Exception e) {
    e.printStackTrace();
}


Create a Utility to Copy and Timestamp the File:
Create a utility method that takes the input Excel file, creates a copy with a timestamp in the output directory, and returns the path of the copied file.

Write Logic to Update the Copied File:
Update the copied file during the tests, as needed, and save the updates to the output directory.

Here's a basic example to illustrate these steps:

import java.io.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ExcelFileUtility {

    public static String copyAndTimestampInputFile(String inputFilePath, String outputDirectory) throws IOException {
        File inputFile = new File(inputFilePath);

        // Ensure the output directory exists, create if necessary
        File outputDir = new File(outputDirectory);
        if (!outputDir.exists()) {
            outputDir.mkdirs();
        }

        // Generate a timestamp for the copied file
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss");
        String timestamp = dateFormat.format(new Date());

        // Create a new file name based on timestamp and original file name
        String outputFileName = timestamp + "_" + inputFile.getName();

        // Copy the input file to the output directory with the new name
        String outputPath = Paths.get(outputDirectory, outputFileName).toString();
        Files.copy(inputFile.toPath(), Paths.get(outputPath), StandardCopyOption.REPLACE_EXISTING);

        return outputPath;
    }

    // Additional methods to update the copied file during tests
    // ...
}


public class YourTestOrServiceClass {

    // Assuming you have a method to update the copied file
    // updateCopiedFile(outputPath, ...);

    public void runTests() {
        try {
            // Copy the input file to the output directory and get the copied file path
            String inputFilePath = "path/to/your/input/file.xlsx";
            String outputDirectory = "path/to/your/output/directory";

            String copiedFilePath = ExcelFileUtility.copyAndTimestampInputFile(inputFilePath, outputDirectory);

            // Update the copied file during tests
            // updateCopiedFile(copiedFilePath, ...);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
In this example, copyAndTimestampInputFile creates a copy of the input Excel file in the specified output directory with a timestamp in the filename. 
You can then use this copied file for your tests, updating it as needed during the test.




To handle multiple files or multiple tables in the job source, you can modify the data structure in your DTO 
(SSISJobDTO) to accommodate a list of files and a list of tables. Additionally, 
you can enhance the logic to split the source cell content appropriately based on the provided structure (tables or files). Below are the suggested changes:

Enhanced SSISJobDTO:
Modify the SSISJobDTO to include lists for files and tables.

public class SSISJobDTO {
    private boolean runFlag;
    private String jobName;
    private List<String> files;  // List of file paths
    private List<String> tables; // List of table names
    private boolean runStatus;
    private String packageName;
    private String jobStatus;

    // Constructors, getters, setters
}
Updated Logic to Parse Source:
Update the logic to parse the source cell content and split it into files and tables.

while (iterator.hasNext()) {
    Row currentRow = iterator.next();

    // Assuming column indices for respective fields
    boolean runFlag = currentRow.getCell(0).getStringCellValue().equalsIgnoreCase("Yes");
    String jobName = currentRow.getCell(1).getStringCellValue();
    String source = currentRow.getCell(2).getStringCellValue();
    boolean runStatus = currentRow.getCell(3).getBooleanCellValue();
    String packageName = currentRow.getCell(4).getStringCellValue();
    String jobStatus = currentRow.getCell(5).getStringCellValue();

    // Only process rows with RunFlag set to "Yes"
    if (runFlag) {
        SSISJobDTO jobDTO = new SSISJobDTO();
        jobDTO.setRunFlag(runFlag);
        jobDTO.setJobName(jobName);
        jobDTO.setRunStatus(runStatus);
        jobDTO.setPackageName(packageName);
        jobDTO.setJobStatus(jobStatus);

        // Split the source into files and tables based on the provided structure
        String[] sources = source.split(", ");
        for (String src : sources) {
            if (src.startsWith("M:\\")) {
                // Assuming files start with "M:\"
                if (jobDTO.getFiles() == null) {
                    jobDTO.setFiles(new ArrayList<>());
                }
                jobDTO.getFiles().add(src);
            } else {
                // Assuming tables start with "CRU.dbo."
                if (jobDTO.getTables() == null) {
                    jobDTO.setTables(new ArrayList<>());
                }
                jobDTO.getTables().add(src);
            }
        }

        dtoList.add(jobDTO);
    }
}
This updated approach assumes that files start with "M:" and tables start with "CRU.dbo." based on the provided structure.
 You may need to adjust the logic based on the actual structure of your source data. 
 The SSISJobDTO now contains lists for files and tables, allowing for handling multiple files or multiple tables for each job.
 
 
 
 public class ExcelGenerator {

    public void generateExcel(List<YourEntity> entities, String sqlQuery) {
        // Create an Excel workbook and worksheet
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Validation Results");

        // Add the SQL query to the worksheet
        Row sqlQueryRow = sheet.createRow(0);
        Cell sqlQueryCell = sqlQueryRow.createCell(0);
        sqlQueryCell.setCellValue(sqlQuery);

        // Add the headers to the worksheet
        Row headerRow = sheet.createRow(1);
        // Add header cells for your entity fields

        // Add data rows to the worksheet
        int rowNum = 2;
        for (YourEntity entity : entities) {
            Row dataRow = sheet.createRow(rowNum++);
            // Add data cells for your entity fields
        }

        // Write the workbook to a file or return as a response
        // Handle exception and file writing logic here
    }
}
