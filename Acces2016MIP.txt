Sub ExportAndLabelExcel()
    Dim strFilePath As String
    Dim strTableName As String
    Dim shell As Object
    Dim psCommand As String

    ' Path to save the Excel file
    strFilePath = "C:\Path\To\ExportedFile.xlsx"

    ' Table name to export
    strTableName = "YourTableName"

    ' Step 1: Export data to Excel using TransferSpreadsheet
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel12Xml, strTableName, strFilePath, True

    ' Step 2: Apply MIP label using PowerShell
    Set shell = CreateObject("WScript.Shell")
    psCommand = "powershell.exe -Command ""Set-AIPFileLabel -Path '" & strFilePath & "' -LabelId 'Your-MIP-Label-ID' -JustificationMessage 'Automated labeling after export'"""
    shell.Run psCommand, 1, True  ' Run synchronously to ensure the label is applied

    ' Step 3: Optional updates (if needed, update the Excel file here)
    ' Call UpdateExcelFile(strFilePath)

    ' Cleanup
    Set shell = Nothing

    MsgBox "Excel file exported and labeled successfully!"
End Sub

Option 1: Redirect PowerShell Output to a Log File
You can use the -RedirectStandardOutput and -RedirectStandardError options to capture both standard output and errors into a file.
Sub ExportAndLabelExcel()
    Dim strFilePath As String
    Dim strTableName As String
    Dim shell As Object
    Dim psCommand As String
    Dim logFilePath As String

    ' Path to save the Excel file
    strFilePath = "C:\Path\To\ExportedFile.xlsx"

    ' Path for the log file
    logFilePath = "C:\Path\To\PowerShellLog.txt"

    ' Table name to export
    strTableName = "YourTableName"

    ' Step 1: Export data to Excel using TransferSpreadsheet
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel12Xml, strTableName, strFilePath, True

    ' Step 2: Apply MIP label using PowerShell
    Set shell = CreateObject("WScript.Shell")
    psCommand = "powershell.exe -Command ""Set-AIPFileLabel -Path '" & strFilePath & "' -LabelId 'Your-MIP-Label-ID' -JustificationMessage 'Automated labeling after export' 2>&1 | Out-File -FilePath '" & logFilePath & "' -Append"""
    shell.Run psCommand, 1, True  ' Run synchronously to wait for the command to complete

    ' Optional: Notify user to check the log file for errors
    MsgBox "Process completed. Check the log file for details: " & logFilePath

    ' Cleanup
    Set shell = Nothing
End Sub
Explanation:
2>&1: Redirects both the standard error (2) and standard output (1) streams to the same destination.
Out-File: Sends the combined output to the specified log file.
-Append: Ensures new output is appended to the existing log file, so you don’t overwrite previous logs.

Option 2: Capture Output in VBA
If you prefer to capture the output directly in VBA without using a log file, you can use the Exec method instead of Run:

Sub ExportAndLabelExcel()
    Dim strFilePath As String
    Dim strTableName As String
    Dim shell As Object
    Dim psCommand As String
    Dim execObject As Object
    Dim output As String

    ' Path to save the Excel file
    strFilePath = "C:\Path\To\ExportedFile.xlsx"

    ' Table name to export
    strTableName = "YourTableName"

    ' Step 1: Export data to Excel using TransferSpreadsheet
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel12Xml, strTableName, strFilePath, True

    ' Step 2: Apply MIP label using PowerShell
    Set shell = CreateObject("WScript.Shell")
    psCommand = "powershell.exe -Command ""Set-AIPFileLabel -Path '" & strFilePath & "' -LabelId 'Your-MIP-Label-ID' -JustificationMessage 'Automated labeling after export'"""

    ' Execute the PowerShell command and capture output
    Set execObject = shell.Exec(psCommand)
    Do While execObject.Status = 0
        DoEvents  ' Wait for the command to finish
    Loop

    ' Capture output
    output = execObject.StdOut.ReadAll

    ' Check for errors
    If InStr(execObject.StdErr.ReadAll, "Error") > 0 Then
        MsgBox "An error occurred: " & output, vbCritical
    Else
        MsgBox "Process completed successfully: " & output
    End If

    ' Cleanup
    Set execObject = Nothing
    Set shell = Nothing
End Sub
Explanation:
Exec Method:
Allows you to execute the PowerShell command and capture its output and error streams in VBA.
StdOut.ReadAll:
Reads the standard output from the executed PowerShell command.
StdErr.ReadAll:
Reads the error stream from the PowerShell command to check for errors.


Best Practice for Debugging PowerShell Commands
Test PowerShell Commands Manually: Run the Set-AIPFileLabel command directly in a PowerShell window to verify it works as expected:
Set-AIPFileLabel -Path "C:\Path\To\ExportedFile.xlsx" -LabelId "Your-MIP-Label-ID" -JustificationMessage "Automated labeling after export"

Check for Missing Prerequisites:

Ensure the Azure Information Protection Unified Labeling Client is installed.
Verify that the LabelId is valid and accessible to the current user.

Enable PowerShell Logging: Use PowerShell's built-in logging to capture all executed commands and errors:

Start-Transcript -Path "C:\Path\To\TranscriptLog.txt"
Set-AIPFileLabel -Path "C:\Path\To\ExportedFile.xlsx" -LabelId "Your-MIP-Label-ID" -JustificationMessage "Automated labeling after export"
Stop-Transcript


Workflow Summary
Export the File Using DoCmd.TransferSpreadsheet:

Create the Excel file as usual.
Open Excel via VBA (Using Automation):

Load the exported Excel file into an Excel Application Object.
Apply the MIP sensitivity label programmatically using the SensitivityLabel property.
Save and Close the File:


Save the Excel file after applying the label.
Sub ExportExcelWithMIP()
    Dim strFilePath As String
    Dim strTableName As String
    Dim xlApp As Object
    Dim xlWorkbook As Object
    
    ' Path to save the Excel file
    strFilePath = "C:\Path\To\ExportedFile.xlsx"
    
    ' Table name to export
    strTableName = "YourTableName"
    
    ' Step 1: Export data to Excel using TransferSpreadsheet
    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel12Xml, strTableName, strFilePath, True

    ' Step 2: Open Excel file and apply sensitivity label
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = False ' Keep Excel invisible during processing
    
    ' Open the exported Excel file
    Set xlWorkbook = xlApp.Workbooks.Open(strFilePath)
    
    ' Step 3: Apply Sensitivity Label
    On Error Resume Next
    xlWorkbook.SensitivityLabel.SetLabel "Confidential", "" ' Replace with your MIP Label name
    If Err.Number <> 0 Then
        MsgBox "Error applying MIP label: " & Err.Description, vbCritical
        Err.Clear
    End If
    On Error GoTo 0

    ' Save and close the Excel file
    xlWorkbook.Save
    xlWorkbook.Close False
    xlApp.Quit
    
    ' Cleanup
    Set xlWorkbook = Nothing
    Set xlApp = Nothing

    MsgBox "Excel file exported and MIP label applied successfully!"
End Sub
Not all builds of Office expose the SensitivityLabel property programmatically. To verify, use Immediate Window in the VBA editor:

Debug.Print xlWorkbook.SensitivityLabel Is Nothing

If True is returned, the property is not available in your version of Excel.



The Microsoft Excel Object Library and Microsoft Office Object Library, version 16.0, are the default libraries
included with Office 2016, Office 2019, and Office 365. These libraries should provide all the required objects, methods, and properties for integrating Excel with Access and interacting with sensitivity labels if the required features are supported by your organization's setup.

Here’s what to keep in mind when working with these references and troubleshooting issues with Sensitivity Labels in Access VBA:

1. Compatibility of Version 16.0 Libraries
Version 16.0 is backward-compatible with earlier versions of Office (e.g., Office 2013) and 
forward-compatible with Microsoft 365 (Office 365).

If your organization uses Microsoft 365, referencing version 16.0 libraries is still valid and 
should support all the latest features, including sensitivity labels.

2. Features of the Referenced Libraries
Microsoft Excel Object Library:

Enables interaction with Excel objects like Workbook, Worksheet, Range, etc.
Provides methods for automating Excel tasks (e.g., opening workbooks, editing cells).
Allows access to the SensitivityLabel object through the Workbook object.

Microsoft Office Object Library:

Provides access to Office-wide objects and enums, such as MsoAssignmentMethod.
Includes APIs for handling features like Sensitivity Labels, Ribbon customizations, and other cross-Office features.

3. Verifying Sensitivity Label API Availability
Even with the correct references, the Sensitivity Label API might not be available in Access VBA due to:

Policy Restrictions:

Your organization might restrict programmatic access to sensitivity labels in some Office apps, such as Access.
Licensing Issues:

Sensitivity Labels require a specific license tier (e.g., Microsoft 365 E5 or AIP Premium).
Environment Configuration:

Some features may only be enabled for Excel, Word, and PowerPoint, but not Access.
Test in Excel:
You can test the SensitivityLabel object directly in Excel to confirm whether it's accessible in your environment.

Sub TestSensitivityLabelInExcel()
    Dim lblInfo As Office.LabelInfo
    Dim wb As Workbook

    Set wb = ThisWorkbook

    On Error Resume Next
    Set lblInfo = wb.SensitivityLabel.GetLabelInfo()
    If lblInfo Is Nothing Then
        MsgBox "SensitivityLabel is not available or no label is applied."
    Else
        MsgBox "Label Name: " & lblInfo.Name & vbCrLf & "Label ID: " & lblInfo.LabelId
    End If
    On Error GoTo 0
End Sub



4. Late Binding as a Workaround
If issues persist when referencing the libraries in Access, you can try late binding. Late binding eliminates 
the dependency on specific versions of the 
referenced libraries, which might help if corporate policies are restricting access.
Sub ApplySensitivityLabelLateBinding()
    Dim xlApp As Object
    Dim xlWorkbook As Object
    Dim lblInfo As Object

    ' Create Excel application
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = False
    Set xlWorkbook = xlApp.Workbooks.Open("C:\Path\To\File.xlsx")

    ' Access Sensitivity Label information
    On Error Resume Next
    Set lblInfo = xlWorkbook.SensitivityLabel.CreateLabelInfo()
    If lblInfo Is Nothing Then
        MsgBox "SensitivityLabel is not available or no label is applied."
    Else
        lblInfo.LabelId = "Your-Label-GUID-Here"
        lblInfo.SetLabel "Automated justification message"
        xlWorkbook.Save
        MsgBox "Label applied successfully!"
    End If
    On Error GoTo 0

    ' Cleanup
    xlWorkbook.Close False
    xlApp.Quit
    Set lblInfo = Nothing
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
End Sub

5. Next Steps
Confirm Your Licensing:

Verify if your organization’s Microsoft 365 license tier supports Sensitivity Label APIs.
Test Directly in Excel:

If the API works in Excel VBA but fails in Access, it’s likely an environment restriction or a limitation in Access.
Contact IT:

Ask if any policies prevent programmatic access to sensitivity labels in Access VBA.