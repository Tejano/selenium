
Storing user IDs and passwords in a file for a SQL Server database, or any other database,
 is generally not a recommended practice due to security concerns. It's better to use a secure method for storing 
 and managing database credentials, such as environment variables or a configuration management system like HashiCorp Vault. However,
 if you have a specific use case that requires you to use a file, you can do so with caution. Here's how you might approach it:

Create a Properties File: Create a properties file (e.g., database.properties) to store the database credentials.
 This file should be located outside of your source code repository for security reasons.
 
db.url=jdbc:sqlserver://localhost:1433/YourDatabase
db.username=your_username
db.password=your_password

Configure Spring Boot: In your Spring Boot application, you can configure a DataSource bean to read the properties from the file. 
You can use the @PropertySource annotation to load the properties file and then inject the values into your data source configuration.

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import javax.sql.DataSource;

@Configuration
@PropertySource("classpath:database.properties")
public class DatabaseConfig {

    @Value("${db.url}")
    private String dbUrl;

    @Value("${db.username}")
    private String dbUsername;

    @Value("${db.password}")
    private String dbPassword;

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setUrl(dbUrl);
        dataSource.setUsername(dbUsername);
        dataSource.setPassword(dbPassword);
        return dataSource;
    }
}

Secure the Properties File: Ensure that the properties file is properly secured. Limit access to this file to authorized personnel only and encrypt the file if possible.

Keep Secrets Secure: Consider using tools like Docker Secrets, Kubernetes Secrets, or HashiCorp Vault for securely managing database credentials. This is a more secure approach than storing them in a properties file.

Rotate Passwords: If you do store credentials in a file, make sure to implement a password rotation policy and update the credentials in the file regularly.

Remember that using environment variables or a dedicated secrets management solution is a more secure and recommended approach for storing and managing database credentials in a production environment. 
Storing credentials in a file should only be considered as a temporary or development solution and not for production use, especially if security is a concern



If you don't want to store the username and password directly in the properties file due to security concerns, 
and you also don't want to check them into your Git repository, you can use a local 
configuration file to load the sensitive data. Here's a way to do it:

Create a Local Configuration File: Create a local configuration file (e.g., local-config.properties) on your local development machine.
 This file will store the sensitive information and should not be checked into your Git repository.
db.username=your_username
db.password=your_password


Load Local Configuration in Spring Boot: In your Spring Boot application, create a separate configuration class that loads this local configuration file. This class can load the local properties 
and set them as environment variables, which can then be used in your Spring Boot properties file. Here's an example of how to do this:
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

@Configuration
@PropertySource("classpath:application.properties")
public class LocalConfig {

    public LocalConfig(Environment environment) throws IOException {
        Properties properties = new Properties();
        try (FileInputStream inputStream = new FileInputStream("local-config.properties")) {
            properties.load(inputStream);
            System.setProperty("spring.datasource.username", properties.getProperty("db.username"));
            System.setProperty("spring.datasource.password", properties.getProperty("db.password"));
        }
    }
}

Update Your Spring Boot Properties: In your application.properties or application.yml file,
 you can reference the environment variables you set in the LocalConfig class. For example:
 
spring.datasource.url=jdbc:sqlserver://localhost:1433/YourDatabase
spring.datasource.username=${spring.datasource.username}
spring.datasource.password=${spring.datasource.password}

With this approach, you store sensitive data in a separate local configuration file that is not committed to Git, 
and you set these values as environment variables in your Spring Boot application at runtime. 
This way, you avoid storing sensitive information in your version control system while still allowing your application to access these properties.

Remember that you should always take appropriate security measures to protect the local 
configuration file on your development machine and ensure it's not accidentally committed to your version control system


import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

// ...

Resource resource = new ClassPathResource("local-config.properties");
try (InputStream inputStream = resource.getInputStream()) {
     properties.load(inputStream);
            System.setProperty("spring.datasource.username", properties.getProperty("db.username"));
            System.setProperty("spring.datasource.password", properties.getProperty("db.password"));
}


@Configuration
@PropertySource("classpath:application.properties")
public class LocalConfig {

    public LocalConfig(Environment environment) throws IOException {
        Properties properties = new Properties();
Resource resource = new ClassPathResource("local-config.properties");
try (InputStream inputStream = resource.getInputStream()) {
     properties.load(inputStream);
            System.setProperty("spring.datasource.username", properties.getProperty("db.username"));
            System.setProperty("spring.datasource.password", properties.getProperty("db.password"));
    }
}



I understand that you are using a custom configuration class, LocalConfig, to load database credentials from local-config.properties 
and set them as system properties. In this setup, you are manually reading the properties from the local-config.properties file
 and setting system properties. The issue you are facing is that the placeholders are not being resolved in the application.properties file.

To resolve the placeholders in the application.properties file when using custom configuration, 
you should use Spring's PropertySourcesPlaceholderConfigurer bean to handle the property resolution. 
Here's how you can modify your LocalConfig class to set up property resolution:

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.env.Environment;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import java.io.IOException;
import java.util.Properties;

@Configuration
public class LocalConfig {

    public LocalConfig(Environment environment) throws IOException {
        Properties properties = new Properties();
        Resource resource = new ClassPathResource("local-config.properties");
        try (InputStream inputStream = resource.getInputStream()) {
            properties.load(inputStream);
            System.setProperty("spring.datasource.username", properties.getProperty("db.username"));
            System.setProperty("spring.datasource.password", properties.getProperty("db.password"));
        }
    }

    @Bean
    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {
        return new PropertySourcesPlaceholderConfigurer();
    }
}
In this updated code:

The LocalConfig class still reads the properties from the local-config.properties file and sets them as system properties.

We've added a @Bean method that creates a PropertySourcesPlaceholderConfigurer bean.
 This bean is responsible for resolving property placeholders in the application.properties file and other property sources.

By adding this PropertySourcesPlaceholderConfigurer bean, the placeholders in the application.properties file,
 such as ${spring.datasource.username} and ${spring.datasource.password},
 should be correctly resolved and set to the values provided in local-config.properties.