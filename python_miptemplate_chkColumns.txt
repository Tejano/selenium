import os
import shutil
import pandas as pd
import win32com.client

# ‚úÖ Default Paths (User Can Change)
DEFAULT_TEMPLATE_PATH = r"C:\mip_templates\template.xlsx"
DEFAULT_SOURCE_FOLDER = r"C:\path\to\source"
DEFAULT_DEST_FOLDER = r"C:\path\to\destination"

# ‚úÖ User Input (With Defaults)
template_path = input(f"Enter template path [{DEFAULT_TEMPLATE_PATH}]: ").strip() or DEFAULT_TEMPLATE_PATH
source_folder = input(f"Enter source folder [{DEFAULT_SOURCE_FOLDER}]: ").strip() or DEFAULT_SOURCE_FOLDER
dest_folder = input(f"Enter destination folder [{DEFAULT_DEST_FOLDER}]: ").strip() or DEFAULT_DEST_FOLDER

# ‚úÖ Ensure Destination Folder Exists
os.makedirs(dest_folder, exist_ok=True)

# ‚úÖ Debugging: Print Selected Paths
print(f"\nüîç Source Folder: {source_folder}")
print(f"üìÇ Destination Folder: {dest_folder}")
print(f"üìÑ Template File: {template_path}")

# ‚úÖ Special Formatting Rules
TEXT_COLUMNS = ["ID", "Code", "SerialNumber"]  # Text (Preserve Leading Zeros)
CURRENCY_COLUMNS = ["Price", "Amount", "TotalCost"]  # Currency
DATE_COLUMNS = ["OrderDate", "ShipmentDate"]  # Dates

def detect_delimiter(file_path):
    """Detects whether a file is tab-delimited or comma-delimited."""
    with open(file_path, "r", encoding="utf-8") as f:
        first_line = f.readline()
        if "\t" in first_line:
            return "\t"
        else:
            return ","

def convert_xls_to_xlsx(file_path):
    """Converts a mislabeled .xls file to a proper .xlsx format with MIP label."""
    try:
        print(f"üöÄ Processing: {file_path}")

        # ‚úÖ Step 1: Copy the MIP-Labeled Template
        new_xlsx_path = os.path.join(dest_folder, os.path.basename(file_path).replace(".xls", ".xlsx"))
        shutil.copy(template_path, new_xlsx_path)

        # ‚úÖ Step 2: Detect Delimiter and Read File
        delimiter = detect_delimiter(file_path)
        df = pd.read_csv(file_path, delimiter=delimiter, dtype=str, encoding="utf-8", low_memory=False)

        # ‚úÖ Step 3: Ensure Data is Read Correctly
        if df.empty:
            print(f"‚ö†Ô∏è Skipping empty file: {file_path}")
            return
        df = df.dropna(how="all")  # Remove fully empty rows

        # ‚úÖ Step 4: Open the Copied MIP-Labeled Template in Excel
        excel = win32com.client.Dispatch("Excel.Application")
        excel.Visible = False  # Run in background
        excel.DisplayAlerts = False  # Disable pop-ups

        wb = excel.Workbooks.Open(new_xlsx_path)
        ws = wb.Sheets(1)  # First sheet

        # ‚úÖ Step 5: Copy Column Headers
        for col_idx, column_name in enumerate(df.columns, start=1):
            ws.Cells(1, col_idx).Value = column_name  # Write headers

        # ‚úÖ Step 6: Copy Data Into the Template
        for row_idx, row in df.iterrows():
            for col_idx, (column_name, cell_value) in enumerate(row.items(), start=1):
                if pd.isna(cell_value) or cell_value.strip() == "":
                    ws.Cells(row_idx + 2, col_idx).Value = ""  # Start from row 2 (headers in row 1)
                elif column_name in TEXT_COLUMNS:  # Preserve Leading Zeros
                    ws.Cells(row_idx + 2, col_idx).NumberFormat = "@"
                    ws.Cells(row_idx + 2, col_idx).Value = cell_value
                elif column_name in CURRENCY_COLUMNS:  # Format as Currency
                    ws.Cells(row_idx + 2, col_idx).NumberFormat = "$#,##0.00"
                    ws.Cells(row_idx + 2, col_idx).Value = float(cell_value.replace(",", "").replace("$", ""))
                elif column_name in DATE_COLUMNS:  # Format as Date
                    ws.Cells(row_idx + 2, col_idx).NumberFormat = "mm/dd/yyyy"
                    try:
                        ws.Cells(row_idx + 2, col_idx).Value = pd.to_datetime(cell_value).strftime("%m/%d/%Y")
                    except:
                        ws.Cells(row_idx + 2, col_idx).Value = cell_value  # Fallback if parsing fails
                elif cell_value.startswith("0") and cell_value.isdigit():  # Keep Leading Zeros
                    ws.Cells(row_idx + 2, col_idx).NumberFormat = "@"
                    ws.Cells(row_idx + 2, col_idx).Value = cell_value
                elif "E" in cell_value or "e" in cell_value:  # Convert Exponential Numbers
                    ws.Cells(row_idx + 2, col_idx).NumberFormat = "0"
                    ws.Cells(row_idx + 2, col_idx).Value = float(cell_value)
                else:  # Default Case (Numbers or Text)
                    ws.Cells(row_idx + 2, col_idx).Value = cell_value

        # ‚úÖ Step 7: Save the File (MIP Label Stays from Template)
        wb.Save()
        wb.Close()
        excel.Quit()

        print(f"‚úÖ Converted and labeled file: {new_xlsx_path}")

    except Exception as e:
        print(f"‚ùå ERROR converting {file_path}: {e}")

# ‚úÖ Step 8: Find and Process .xls Files
file_found = False  # Track if any files were found
for file in os.listdir(source_folder):
    full_path = os.path.join(source_folder, file)
    print(f"üîç Checking: {full_path}")  # Debugging
    if file.endswith(".xls"):
        file_found = True
        print(f"üìÇ Found File: {file}")  # File Detected
        convert_xls_to_xlsx(full_path)

# ‚úÖ Final Status Check
if not file_found:
    print("‚ö†Ô∏è No .xls files found in the source folder.")

print("‚úÖ All files processed!")
