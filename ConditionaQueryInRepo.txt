
Yes, you can add this code to a repository class. Typically, in Spring Data JPA, 
a repository class is where you define methods for accessing data from the underlying database.

If you want to use a DTO (Data Transfer Object) to represent the results of your query,
 you can modify the code accordingly. Here's how you can do it:


@Repository
public class YourEntityRepository {

    @PersistenceContext
    private EntityManager entityManager;

    public List<YourDto> findEntitiesByCommType(String specificCommType) {
        TypedQuery<YourDto> query;
        if (specificCommType != null) {
            query = entityManager.createQuery("SELECT new YourDto(e.id, e.name) FROM YourEntity e WHERE e.commType = :commType", YourDto.class);
            query.setParameter("commType", specificCommType);
        } else {
            query = entityManager.createQuery("SELECT new YourDto(e.id, e.name) FROM YourEntity e", YourDto.class);
        }
        return query.getResultList();
    }
}


In your repositories, you need to specify which EntityManagerFactory to use. 
You can do this using @PersistenceContext(unitName = "primary") for your primary data source or
 @PersistenceContext(unitName = "secondary") for your secondary data source.

Here's an example repository using the primary data source:
@Repository
public class PrimaryEntityRepository {

    @PersistenceContext(unitName = "primary")
    private EntityManager entityManager;

    public List<YourDto> findEntitiesByCommType(String specificCommType) {
        // Your query logic here
    }
}
And similarly, you can create a repository for the secondary data source using the appropriate EntityManagerFactory. 
This way, each repository knows which database to connect to. Make sure your 
@Configuration class is properly configuring the multiple data sources and entity manager factories according to your setup.

