
To convert Me.OpenArgs to parameters for a pass-through query in Access 2016,
 you can split Me.OpenArgs into individual parameters and use them in your pass-through query creation. Here's a step-by-step approach to achieve this:

Step-by-Step Conversion
Step 1: Extract Parameters from Me.OpenArgs
Assume Me.OpenArgs contains parameters in a delimited string format
 (e.g., "param1=value1;param2=value2"). You can split this string and use it to build your pass-through query.

Step 2: Create a Function to Parse Me.OpenArgs
First, create a function to parse Me.OpenArgs into a dictionary of parameters.

Public Function ParseOpenArgs(openArgs As String) As Object
    Dim params As Object
    Set params = CreateObject("Scripting.Dictionary")
    
    Dim pairs() As String
    Dim pair As Variant
    Dim keyValue() As String
    
    ' Split the openArgs string by semicolon
    pairs = Split(openArgs, ";")
    
    ' Loop through each pair and split into key and value
    For Each pair In pairs
        If InStr(pair, "=") > 0 Then
            keyValue = Split(pair, "=")
            params.Add keyValue(0), keyValue(1)
        End If
    Next pair
    
    Set ParseOpenArgs = params
End Function

Step 3: Modify the Pass-Through Query Function
Modify the existing CreatePassThroughQuery function to use the parsed parameters.

Public Function CreatePassThroughQuery(queryType As String, queryName As String, params As Object) As String
    On Error GoTo ErrorHandler
    
    Dim db As DAO.Database
    Dim qdf As DAO.QueryDef
    Dim sql As String
    Dim param As Variant
    Dim tempQueryName As String
    Dim connString As String
    Dim hasParams As Boolean
    
    ' Retrieve the connection string from a DSN-less linked table
    connString = GetConnectionStringFromLinkedTable("YourLinkedTableName") ' Replace with the name of your linked table
    
    If connString = "" Then
        Err.Raise vbObjectError + 2, "CreatePassThroughQuery", "Failed to retrieve connection string."
    End If
    
    Set db = CurrentDb
    
    ' Generate a unique query name
    tempQueryName = "qryPassThroughTemp_" & Environ("USERNAME") & "_" & Format(Now, "yyyymmddhhnnss")
    
    ' Determine the base SQL statement based on the query type
    If queryType = "SP" Then
        sql = "EXEC " & queryName
    ElseIf queryType = "View" Then
        sql = "SELECT * FROM " & queryName
    Else
        Err.Raise vbObjectError + 1, "CreatePassThroughQuery", "Invalid query type specified."
    End If
    
    ' Check if there are any parameters
    hasParams = params.Count > 0
    
    ' If there are parameters and it's a view, add the WHERE clause
    If queryType = "View" And hasParams Then
        sql = sql & " WHERE "
    End If
    
    ' Loop through the parameters dictionary and append each parameter to the SQL string
    For Each param In params.Keys
        If queryType = "SP" Then
            sql = sql & " @" & param & " = '" & params(param) & "',"
        ElseIf queryType = "View" Then
            sql = sql & param & " = '" & params(param) & "' AND "
        End If
    Next param
    
    ' Remove the trailing comma for SP or AND for View
    If queryType = "SP" Then
        If Right(sql, 1) = "," Then
            sql = Left(sql, Len(sql) - 1)
        End If
    ElseIf queryType = "View" Then
        If hasParams And Right(sql, 5) = " AND " Then
            sql = Left(sql, Len(sql) - 5)
        End If
        sql = sql & ";"
    End If
    
    ' Create a new pass-through query
    Set qdf = db.CreateQueryDef(tempQueryName)
    qdf.Connect = "ODBC;" & connString
    qdf.SQL = sql
    qdf.ReturnsRecords = True
    
    ' Clean up and return the name of the temporary query
    Set qdf = Nothing
    Set db = Nothing
    
    CreatePassThroughQuery = tempQueryName
    Exit Function
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure CreatePassThroughQuery"
    CreatePassThroughQuery = ""
End Function

Step 4: Update the Report's RecordSource
Finally, update the report's RecordSource using the pass-through query created from the parsed Me.OpenArgs.

Private Sub Report_Open(Cancel As Integer)
    On Error GoTo ErrorHandler
    
    Dim params As Object
    Dim tempQueryName As String
    
    ' Parse the OpenArgs into parameters
    Set params = ParseOpenArgs(Me.OpenArgs)
    
    ' Create the pass-through query with the provided parameters
    tempQueryName = CreatePassThroughQuery("SP", "usp_MyStoredProcedure", params)
    
    ' Check if the query creation was successful
    If tempQueryName <> "" Then
        ' Set the RecordSource of the report to the pass-through query
        Me.RecordSource = tempQueryName
    Else
        MsgBox "Failed to create the pass-through query.", vbCritical
        Cancel = True
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in Report_Open"
    Cancel = True
End Sub

Summary:
Parse Me.OpenArgs: Create a function to parse Me.OpenArgs into key-value pairs.
Create Pass-Through Query: Use the parsed parameters to dynamically build the SQL for a pass-through query.
Set RecordSource: Update the report's RecordSource to use the dynamically created pass-through query.
By following these steps, you can convert the old Exec storedprocedure & 
Me.OpenArgs approach to a more robust and flexible method using pass-through queries in Access 2016.


Example of Using the Connection String with DAO for Pass-Through Queries
Given that pass-through queries in Access use DAO, here’s how you can effectively use your ADO-style connection string with DAO:

Retrieve the Connection String:
Ensure you have a function that retrieves the connection string correctly.

Public Function GetConnectionStringFromLinkedTable(tableName As String) As String
    Dim db As DAO.Database
    Dim tbl As DAO.TableDef
    Dim connString As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb
    Set tbl = db.TableDefs(tableName)
    
    ' Get the connection string from the linked table
    connString = tbl.Connect
    
    ' Remove the "ODBC;" prefix if it exists
    If Left(connString, 5) = "ODBC;" Then
        connString = Mid(connString, 6)
    End If
    
    GetConnectionStringFromLinkedTable = connString
    Exit Function
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in GetConnectionStringFromLinkedTable"
    GetConnectionStringFromLinkedTable = ""
End Function



If Me.OpenArgs is always null even though DoCmd.OpenReport is passing an argument, it could be due to how the arguments are being passed or retrieved. Let’s make sure that the arguments are passed correctly and retrieved properly in the report's Open event.

Here’s a step-by-step guide to ensure the arguments are passed and retrieved correctly:

Step-by-Step Guide
Step 1: Ensure Correct Argument Passing with DoCmd.OpenReport
Ensure that you are passing the arguments correctly when you open the report.
The OpenArgs parameter in DoCmd.OpenReport should be properly set.


Sub OpenMyReport()
    Dim reportArgs As String
    reportArgs = "param1=value1;param2=value2" ' Example arguments
    DoCmd.OpenReport "MyReport", acViewPreview, , , , reportArgs
End Sub

Step 2: Parse and Use Me.OpenArgs in the Report
In the report’s Open event, parse Me.OpenArgs and create a pass-through query.
Private Sub Report_Open(Cancel As Integer)
    On Error GoTo ErrorHandler
    
    Dim params As Object
    Dim tempQueryName As String
    
    ' Ensure OpenArgs is not null
    If Not IsNull(Me.OpenArgs) Then
        ' Parse the OpenArgs into parameters
        Set params = ParseOpenArgs(Me.OpenArgs)
        
        ' Create the pass-through query with the provided parameters
        tempQueryName = CreatePassThroughQuery("SP", "usp_MyStoredProcedure", params)
        
        ' Check if the query creation was successful
        If tempQueryName <> "" Then
            ' Set the RecordSource of the report to the pass-through query
            Me.RecordSource = tempQueryName
        Else
            MsgBox "Failed to create the pass-through query.", vbCritical
            Cancel = True
        End If
    Else
        MsgBox "No parameters were passed.", vbCritical
        Cancel = True
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in Report_Open"
    Cancel = True
End Sub
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
Step 1: Initialize Dictionary on Startup
AutoExec Macro:

Create a New Macro:
Go to "Create" > "Macro".
Add a "RunCode" action.
In the "Function Name" box, type EnsureSPParamDictInitialized().
Save the macro as AutoExec.
Standard Module Code:


' In a standard module
Public spParamDict As Object

Public Function EnsureSPParamDictInitialized() As Boolean
    On Error GoTo ErrorHandler

    ' Check if the dictionary is already created
    If spParamDict Is Nothing Then
        ' Create the dictionary object
        Set spParamDict = CreateObject("Scripting.Dictionary")
        
        ' Add entries to the dictionary for each stored procedure
        spParamDict.Add "usp_StoredProcedure1", Array("param1", "param2", "param3")
        spParamDict.Add "usp_StoredProcedure2", Array("paramA", "paramB", "paramC", "paramD")
        ' Add more stored procedures as needed
    End If
    
    ' Indicate success
    EnsureSPParamDictInitialized = True
    Exit Function

ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in EnsureSPParamDictInitialized"
    EnsureSPParamDictInitialized = False
End Function

Step 2: Use Pass-Through Queries
Parse OpenArgs Function:

Public Function ParseOpenArgs(openArgs As String) As Collection
    Dim params As New Collection
    Dim args() As String
    Dim i As Integer
    Dim cleanedArgs As String
    
    ' Clean up the input string
    cleanedArgs = openArgs
    
    ' Remove leading and trailing single quotes if present
    If Left(cleanedArgs, 1) = "'" And Right(cleanedArgs, 1) = "'" Then
        cleanedArgs = Mid(cleanedArgs, 2, Len(cleanedArgs) - 2)
    End If
    
    ' Replace the delimiter for easier splitting while maintaining the correct data types
    cleanedArgs = Replace(cleanedArgs, "', '", "|")
    
    ' Split the cleanedArgs string by the custom delimiter
    args = Split(cleanedArgs, "|")
    
    ' Loop through each argument, trim, and add to the collection
    For i = 0 To UBound(args)
        Dim currentArg As String
        currentArg = Trim(args(i))
        
        ' Remove leading and trailing single quotes for string values
        If currentArg = "''" Then
            currentArg = "" ' Treat '' as an empty string
        ElseIf Left(currentArg, 1) = "'" And Right(currentArg, 1) = "'" Then
            currentArg = Mid(currentArg, 2, Len(currentArg) - 2)
        End If
        
        ' Add the cleaned argument to the collection
        params.Add currentArg
    Next i
    
    Set ParseOpenArgs = params
End Function

Create Pass-Through Query Function:

Public Function CreatePassThroughQuery(queryType As String, queryName As String, params As Collection) As String
    On Error GoTo ErrorHandler
    
    Dim db As DAO.Database
    Dim qdf As DAO.QueryDef
    Dim sql As String
    Dim i As Integer
    Dim paramName As String
    Dim tempQueryName As String
    Dim connString As String
    Dim paramNames As Variant
    
    ' Retrieve the parameter names for the stored procedure
    If spParamDict.Exists(queryName) Then
        paramNames = spParamDict(queryName)
    Else
        Err.Raise vbObjectError + 1, "CreatePassThroughQuery", "Stored procedure or view not found in parameter dictionary."
    End If
    
    ' Retrieve the connection string from a DSN-less linked table
    connString = GetConnectionStringFromLinkedTable("YourLinkedTableName") ' Replace with the name of your linked table
    
    If connString = "" Then
        Err.Raise vbObjectError + 2, "CreatePassThroughQuery", "Failed to retrieve connection string."
    End If
    
    Set db = CurrentDb
    
    ' Generate a unique query name
    tempQueryName = "qryPassThroughTemp_" & Environ("USERNAME") & "_" & Format(Now, "yyyymmddhhnnss")
    
    ' Determine the base SQL statement based on the query type
    If queryType = "SP" Then
        sql = "EXEC " & queryName
    ElseIf queryType = "View" Then
        sql = "SELECT * FROM " & queryName
    Else
        Err.Raise vbObjectError + 1, "CreatePassThroughQuery", "Invalid query type specified."
    End If
    
    ' Check if there are any parameters
    If params.Count > 0 Then
        If queryType = "SP" Then
            ' Loop through the parameters dictionary and append each parameter to the SQL string
            For i = 1 To params.Count
                If i <= UBound(paramNames) + 1 Then
                    paramName = paramNames(i - 1)
                    sql = sql & " @" & paramName & " = '" & params(i) & "',"
                End If
            Next i
            ' Remove the trailing comma
            If Right(sql, 1) = "," Then
                sql = Left(sql, Len(sql) - 1)
            End If
        ElseIf queryType = "View" Then
            ' Add the WHERE clause for view parameters
            sql = sql & " WHERE "
            For i = 1 To params.Count
                If i <= UBound(paramNames) + 1 Then
                    paramName = paramNames(i - 1)
                    sql = sql & paramName & " = '" & params(i) & "' AND "
                End If
            Next i
            ' Remove the trailing AND
            If Right(sql, 5) = " AND " Then
                sql = Left(sql, Len(sql) - 5)
            End If
        End If
    End If
    
    ' Create a new pass-through query
    Set qdf = db.CreateQueryDef(tempQueryName)
    qdf.Connect = "ODBC;" & connString
    qdf.SQL = sql
    qdf.ReturnsRecords = True
    
    ' Clean up and return the name of the temporary query
    Set qdf = Nothing
    Set db = Nothing
    
    CreatePassThroughQuery = tempQueryName
    Exit Function
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure CreatePassThroughQuery"
    CreatePassThroughQuery = ""
End Function


Step 3: Ensure Linked Tables and Views
Linking SQL Server Tables and Views:

Link SQL Server Tables:
Use the "External Data" tab in Access.
Select "ODBC Database".
Choose "Link to the data source by creating a linked table".
Select your SQL Server and the tables/views to link.

Report Code:
Private Sub Report_Open(Cancel As Integer)
    On Error GoTo ErrorHandler
    
    Dim params As Collection
    Dim tempQueryName As String
    Dim spName As String
    
    ' Ensure the stored procedure parameter dictionary is initialized
    EnsureSPParamDictInitialized
    
    ' Check if OpenArgs is null
    If IsNull(Me.OpenArgs) Then
        MsgBox "Me.OpenArgs is null", vbCritical
        Cancel = True
        Exit Sub
    Else
        MsgBox "Me.OpenArgs: " & Me.OpenArgs, vbInformation
    End If
    
    ' Parse the OpenArgs into a collection of values
    Set params = ParseOpenArgs(Me.OpenArgs)
    
    ' Determine the stored procedure name
    spName = "usp_MyStoredProcedure" ' Adjust this as needed or pass it through OpenArgs if dynamic
    
    ' Create the pass-through query with the provided values
    tempQueryName = CreatePassThroughQuery(spName, params)
    
    ' Check if the query creation was successful
    If tempQueryName <> "" Then
        ' Set the RecordSource of the report to the pass-through query
        Me.RecordSource = tempQueryName
    Else
        MsgBox "Failed to create the pass-through query.", vbCritical
        Cancel = True
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in Report_Open"
    Cancel = True
End Sub

Summary
Initialization: Initialize the dictionary in the AutoExec macro to ensure it is available as soon as the database is opened.
Pass-Through Queries: Use pass-through queries to interact with SQL Server stored procedures.
Linked Tables and Views: Ensure SQL Server tables and views are properly linked in the Access front-end.

By following these steps, you can effectively migrate your Access 2010 ADP database to Access 2016, 
leveraging SQL Server for data storage and processing while ensuring multi-user compatibility.


Example Implementation
Step 1: Add a Form-Level Variable
In the report's code module, add a variable to store the temporary query name.
Private tempQueryName As String


Delete temp query:

Private Sub Report_Close()
    On Error Resume Next
    ' Delete the temporary pass-through query
    If tempQueryName <> "" Then
        CurrentDb.QueryDefs.Delete tempQueryName
        tempQueryName = ""
    End If
End Sub
