To set up a WebDriverWait as part of your configuration file in a Spring Boot application,
 you can create a @Bean method for WebDriverWait in your configuration class. Here's how you can do it:

Update Your Configuration Class:

Modify your existing configuration class to include a @Bean method for WebDriverWait. Here's an example of how to do it:

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class WebDriverConfig {
    @Value("${properties.browser}")
    private String selectedBrowser;

    @Value("${properties.headless}")
    private boolean headless;

    @Bean
    public WebDriver webDriver() {
        WebDriver driver;

        if ("chrome".equalsIgnoreCase(selectedBrowser)) {
            // Set the path to ChromeDriver
            System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

            // Configure ChromeOptions
            ChromeOptions options = new ChromeOptions();
            if (headless) {
                options.addArguments("--headless");
            }

            // Initialize ChromeDriver with ChromeOptions
            driver = new ChromeDriver(options);
        } else if ("edge".equalsIgnoreCase(selectedBrowser)) {
            // Set the path to EdgeDriver
            System.setProperty("webdriver.edge.driver", "path/to/edgedriver");

            // Configure EdgeOptions
            EdgeOptions options = new EdgeOptions();
            if (headless) {
                // Handle headless mode for Edge, if needed
            }
            options.addArguments("--disable-site-isolation-trials");
            // Initialize EdgeDriver with EdgeOptions
            driver = new EdgeDriver(options);
        } else {
            throw new IllegalArgumentException("Unsupported browser: " + selectedBrowser);
        }

        return driver;
    }

    @Bean
    public WebDriverWait webDriverWait(WebDriver webDriver, @Value("${properties.timeout}") int timeoutInSeconds) {
        return new WebDriverWait(webDriver, timeoutInSeconds);
    }
}

In this updated configuration class, a @Bean method named webDriverWait is added. 
It creates a WebDriverWait instance by injecting the WebDriver bean and a timeoutInSeconds property. 
The timeoutInSeconds property is defined in your properties file (e.g., application.properties or application.yml) as follows:

properties.timeout=10
You can customize the timeout value as needed in your properties file.

Use the WebDriverWait in Your Service:

Now that you have defined the WebDriverWait bean, you can use it in your service or components as needed. For example:
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class SeleniumService {
    private final WebDriver webDriver;
    private final WebDriverWait webDriverWait;

    @Autowired
    public SeleniumService(WebDriver webDriver, WebDriverWait webDriverWait) {
        this.webDriver = webDriver;
        this.webDriverWait = webDriverWait;
    }

    public void performAutomation() {
        try {
            // Use the initialized WebDriver and WebDriverWait here
            webDriver.get("https://example.com");
            // Add your automation steps here, including waits using WebDriverWait

            // Example wait for an element to be visible
            webDriverWait.until(driver -> driver.findElement(By.id("someElementId")).isDisplayed());
        } finally {
            // Quit the WebDriver when done
            webDriver.quit();
        }
    }
}
In this code, the WebDriverWait bean is injected into your service, allowing you to use it for 
explicit waits while interacting with the web page. You can customize the timeout duration by adjusting the properties.timeout property in your configuration file.

With this setup, you have a centralized configuration for your WebDriver and WebDriverWait, 
making it easier to manage timeouts and WebDriver instances throughout your Spring Boot application.


import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.logging.LogEntry;
import org.openqa.selenium.logging.LogType;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

public class YourTest {

    @Test
    public void yourTestMethod() {
        // Set up WebDriver and navigate to the web page
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--enable-logging");
        options.addArguments("--log-level=ALL");
        WebDriver driver = new ChromeDriver(options);
        WebDriverWait wait = new WebDriverWait(driver, 10);

        try {
            driver.get("https://example.com");

            // Perform your actions on the web page

            // Capture browser console logs
            LogEntries logs = driver.manage().logs().get(LogType.BROWSER);
            for (LogEntry entry : logs) {
                System.out.println(entry.getMessage());
            }
        } finally {
            // Quit the WebDriver when done
            driver.quit();
        }
    }
}

Selenium Configuration: In your Selenium WebDriver configuration, 
you don't typically need to explicitly specify CSP headers or policies. 
Selenium interacts with the browser, and CSP is usually enforced by the browser itself. 
However, you can configure Chrome to disable CSP during testing if necessary.

In Chrome, you can use the --disable-web-security command-line option to disable CSP 
and other web security features. Here's how you can configure Chrome options in your Selenium test:

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.logging.LogEntry;
import org.openqa.selenium.logging.LogType;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

public class YourTest {

    @Test
    public void yourTestMethod() {
        // Set up WebDriver and navigate to the web page
       
       // Create a temporary directory for Chrome's user data
            Path tempDir = Files.createTempDirectory("chrome_user_data");

	   System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        ChromeOptions options = new ChromeOptions();
        
        // Disable web security (including CSP) for testing purposes
        options.addArguments("--disable-web-security");
		options.addArguments("--disable-site-isolation-trials");
		options.addArguments("--user-data-dir=" + tempDir.toString());
		options.addArguments("--disable-site-isolation-trials");
        options.addArguments("--disable-favicon-loading"); // Disable loading of favicon.ico
		
        WebDriver driver = new ChromeDriver(options);
        WebDriverWait wait = new WebDriverWait(driver, 10);

        try {
            driver.get("https://example.com");

            // Perform your actions on the web page

            // Capture browser console logs
            LogEntries logs = driver.manage().logs().get(LogType.BROWSER);
            for (LogEntry entry : logs) {
                System.out.println(entry.getMessage());
            }
        } finally {
            // Quit the WebDriver when done
            driver.quit();
        }
    }
}

To implement the configuration for Chrome WebDriver with the temporary user data directory in a Spring Boot 
@Configuration class, you can create a @Bean method that configures and returns the WebDriver instance. Here's how you can do it:
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

@Configuration
public class WebDriverConfig {

    @Bean
    public WebDriver webDriver() {
        WebDriver driver = null;

        try {
            // Create a temporary directory for Chrome's user data
            Path tempDir = Files.createTempDirectory("chrome_user_data");

            // Set up Chrome options
            ChromeOptions options = new ChromeOptions();
            options.addArguments("--disable-web-security");
			options.addArguments("--disable-site-isolation-trials");
            options.addArguments("--user-data-dir=" + tempDir.toString());

            // Initialize ChromeDriver with options
            System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
            driver = new ChromeDriver(options);

            // Clean up the temporary directory when the application context is closed
            final Path tempDirToDelete = tempDir;
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                try {
                    Files.deleteIfExists(tempDirToDelete);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }));
        } catch (IOException e) {
            e.printStackTrace();
        }

        return driver;
    }
}

I apologize for the confusion. If you're encountering CSP errors in both 
Chrome and Edge WebDriver, it indicates that CSP restrictions are consistently enforced across browsers,
 and simply disabling them may not be straightforward. To work around CSP restrictions in Microsoft Edge WebDriver, 
 you can use the --disable-site-isolation-trials option, which can sometimes help bypass CSP restrictions similar to the approach in Chrome.

Here's how to configure Microsoft Edge WebDriver with the --disable-site-isolation-trials option:
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;

public class YourTest {
    public static void main(String[] args) {
        EdgeOptions options = new EdgeOptions();
        options.setExperimentalOption("useAutomationExtension", false);
        options.setExperimentalOption("excludeSwitches", Collections.singletonList("enable-automation"));

        WebDriver driver = new EdgeDriver(options);
        driver.get("https://example.com");

        // Continue with your test
    }
}
